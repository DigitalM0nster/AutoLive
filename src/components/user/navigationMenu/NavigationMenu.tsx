"use client";

import { useEffect, useMemo, useState } from "react";
import { usePathname, useRouter } from "next/navigation";
import styles from "./styles.module.scss";
import { Product, Category } from "@/lib/types";

type NavigationMenuProps = {
	productId?: string | number;
};

export default function NavigationMenu({ productId }: NavigationMenuProps) {
	const pathname = usePathname();
	const router = useRouter();

	const [categories, setCategories] = useState<Category[]>([]);
	const [product, setProduct] = useState<Product | null>(null);

	const pages: Record<string, string> = {
		"/promotions": "–ê–∫—Ü–∏–∏",
		"/categories": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –¢–û",
		"/service-kits": "–ö–æ–º–ø–ª–µ–∫—Ç—ã –¢–û",
		"/booking": "–ó–∞–ø–∏—Å—å –Ω–∞ –¢–û",
		"/products": "–ó–∞–ø—á–∞—Å—Ç–∏",
	};

	// üîÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π fetch –∫–∞—Ç–µ–≥–æ—Ä–∏–π
	useEffect(() => {
		console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...");
		fetch("/api/categories")
			.then((res) => {
				console.log("–û—Ç–≤–µ—Ç API –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", res.status);
				return res.json();
			})
			.then((data) => {
				console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", data);
				setCategories(data);
			})
			.catch((err) => {
				console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", err);
				setCategories([]);
			});
	}, []);

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω productId
	useEffect(() => {
		if (productId) {
			fetch(`/api/products/${productId}/public`)
				.then((res) => res.json())
				.then((data) => setProduct(data.product))
				.catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:", err));
		}
	}, [productId]);

	const getCategoryTitle = (id: string | number): string | undefined => {
		console.log("–ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å ID:", id, "–≤ —Å–ø–∏—Å–∫–µ:", categories);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ categories —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
		if (!Array.isArray(categories)) {
			console.log("categories –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:", typeof categories, categories);
			return undefined;
		}

		const found = categories.find((cat) => cat.id.toString() === id.toString());
		console.log("–ù–∞–π–¥–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:", found);
		return found?.title;
	};

	const breadcrumbs = useMemo(() => {
		const segments = pathname.split("/").filter(Boolean);

		// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø—É—Ç–∏ –∫ –ø—Ä–æ–¥—É–∫—Ç—É /products/[productId]
		if (segments[0] === "products" && segments.length === 2) {
			const productId = segments[1];

			// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
			if (/^\d+$/.test(productId) && !product) {
				return [{ name: "–ó–∞–≥—Ä—É–∑–∫–∞...", path: `/products/${productId}` }];
			}

			if (/^\d+$/.test(productId) && product?.title) {
				const breadcrumbs = [];

				// –î–æ–±–∞–≤–ª—è–µ–º "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –¢–û", –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è
				if (product.categoryId) {
					breadcrumbs.push({
						name: "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –¢–û",
						path: "/categories",
					});

					const categoryTitle = getCategoryTitle(product.categoryId);
					if (categoryTitle) {
						breadcrumbs.push({
							name: categoryTitle,
							path: `/categories/${product.categoryId}`,
						});
					}
				}

				// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
				breadcrumbs.push({
					name: product.title,
					path: `/products/${productId}`,
				});

				return breadcrumbs;
			}

			// –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ –ø—Ä–æ–¥—É–∫—Ç—É, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
			return [];
		}

		// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø—É—Ç–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ /categories/[categoryId]
		if (segments[0] === "categories" && segments.length === 2) {
			const categoryId = segments[1];

			// –ï—Å–ª–∏ —ç—Ç–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–∏—Å–ª–æ)
			if (/^\d+$/.test(categoryId)) {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ categories –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
				if (Array.isArray(categories) && categories.length > 0) {
					const categoryTitle = getCategoryTitle(categoryId);
					console.log("Category ID:", categoryId, "Title:", categoryTitle, "Categories:", categories);

					if (categoryTitle) {
						return [
							{
								name: "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –¢–û",
								path: "/categories",
							},
							{
								name: categoryTitle,
								path: `/categories/${categoryId}`,
							},
						];
					}
				}

				// –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID
				return [
					{
						name: "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –¢–û",
						path: "/categories",
					},
					{
						name: ``,
						path: `/categories/${categoryId}`,
					},
				];
			}

			// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
			return [];
		}

		// –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
		return segments
			.map((segment, index) => {
				const fullPath = "/" + segments.slice(0, index + 1).join("/");

				let name: string = pages[fullPath] ?? decodeURIComponent(segment);

				// –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π /categories/[categoryId] - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –ø—Ä—è–º–æ–π –ø—É—Ç—å
				if (segments[0] === "categories" && index === 1 && segments.length > 2) {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–º–µ–Ω—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–∏—Å–ª–æ)
					if (/^\d+$/.test(segment)) {
						const categoryTitle = getCategoryTitle(segment);
						if (!categoryTitle) return null;
						name = categoryTitle;
					}
				}

				// –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ /products/[productId] - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –ø—Ä—è–º–æ–π –ø—É—Ç—å
				if (segments[0] === "products" && index === 1 && segments.length > 2) {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–º–µ–Ω—Ç ID –ø—Ä–æ–¥—É–∫—Ç–∞ (—á–∏—Å–ª–æ)
					if (/^\d+$/.test(segment)) {
						if (!product?.title) return null;
						name = product.title;
					}
				}

				return { name, path: fullPath };
			})
			.filter(Boolean);
	}, [pathname, categories, product, getCategoryTitle, pages]);

	return (
		<div className={styles.navigationMenu}>
			<div className={`${styles.navLine} ${styles.crumbs}`}>
				<div className={styles.backButtonBlock} onClick={() => window.history.back()}>
					‚Üê –ù–∞–∑–∞–¥
				</div>
				<div className={styles.navs}>
					<div className={styles.navBlock}>
						<div className={styles.nav} onClick={() => router.push("/")}>
							–ì–ª–∞–≤–Ω–∞—è
						</div>
						{breadcrumbs.length > 0 && <div className={`${styles.nav} ${styles.separator}`}> / </div>}
					</div>

					{(breadcrumbs as { name: string; path: string }[]).map((crumb, index) => (
						<div key={crumb.path} className={styles.navBlock}>
							<div className={`${styles.nav} ${pathname === crumb.path ? styles.active : ""}`} onClick={() => router.push(crumb.path)}>
								{crumb.name}
							</div>
							{index < breadcrumbs.length - 1 && <div className={`${styles.nav} ${styles.separator}`}> / </div>}
						</div>
					))}
				</div>
			</div>

			<div className={styles.navLine}>
				<div className={styles.pages}>
					{Object.entries(pages).map(([path, name]) => {
						// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
						let isActive = pathname.startsWith(path);

						// –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –¢–û"
						if (pathname.startsWith("/products/") && product?.categoryId && path === "/categories") {
							isActive = true;
						} else if (pathname.startsWith("/products/") && product?.categoryId && path === "/products") {
							isActive = false;
						}

						return (
							<div key={path} className={`button ${styles.pageButton} ${isActive ? styles.active : ""}`} onClick={() => router.push(path)}>
								{name}
							</div>
						);
					})}
				</div>
			</div>
		</div>
	);
}
