// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–∑ globals.scss
import { useCallback, useEffect, useState } from "react";
import { ProductLog, ProductLogResponse, User, DepartmentForLog } from "@/lib/types";
import Loading from "@/components/ui/loading/Loading";

export default function ProductLogsTable({
	productId,
	tableHeaders,
	queryParams,
	onLogsUpdate,
}: {
	productId: number | undefined;
	tableHeaders: any;
	queryParams: any;
	onLogsUpdate?: (totalPages: number) => void;
}) {
	const [activeBlocks, setActiveBlocks] = useState<Record<string, boolean>>({});
	const [loading, setLoading] = useState(false);
	const [error, setError] = useState<string | null>(null);
	const [localLogs, setLocalLogs] = useState<ProductLog[]>([]);
	const [totalPages, setTotalPages] = useState(1);
	// –ò–∑–º–µ–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º Map —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∫–ª—é—á–æ–º –∏ –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ–º
	const [existingUsers, setExistingUsers] = useState<Map<number, User>>(new Map());
	const [existingDepartments, setExistingDepartments] = useState<Set<number>>(new Set());
	const [departmentsData, setDepartmentsData] = useState<Map<number, DepartmentForLog>>(new Map());
	// –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
	const [existingCategories, setExistingCategories] = useState<Set<number>>(new Set());
	const [categoriesData, setCategoriesData] = useState<Map<number, { id: number; title: string }>>(new Map());

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	const checkUsersExistence = useCallback(async (userIds: number[]) => {
		if (userIds.length === 0) return;

		try {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ URL –≤–º–µ—Å—Ç–æ POST
			const params = new URLSearchParams();
			userIds.forEach((id) => params.append("userIds", id.toString()));

			const response = await fetch(`/api/users/check-existence?${params.toString()}`, {
				method: "GET",
				credentials: "include",
				// –£–±–∏—Ä–∞–µ–º headers –∏ body - –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
			});

			if (response.ok) {
				const data = await response.json();
				// –¢–µ–ø–µ—Ä—å API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
				const usersData = data.existingUsers || {};
				// –°–æ–∑–¥–∞–µ–º Map –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
				const usersMap = new Map(Object.entries(usersData).map(([id, userData]) => [parseInt(id), userData as User]));
				setExistingUsers(usersMap);
			} else {
				console.error("–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", response.status, response.statusText);
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
		}
	}, []);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤
	const checkDepartmentsExistence = useCallback(async (departmentIds: number[]) => {
		console.log("üîç checkDepartmentsExistence called with:", departmentIds);
		if (departmentIds.length === 0) {
			console.log("üîç checkDepartmentsExistence - no department IDs, returning");
			return;
		}

		try {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ URL –≤–º–µ—Å—Ç–æ POST
			const params = new URLSearchParams();
			departmentIds.forEach((id) => params.append("departmentIds", id.toString()));

			const response = await fetch(`/api/departments/check-existence?${params.toString()}`, {
				method: "GET",
				credentials: "include",
				// –£–±–∏—Ä–∞–µ–º headers –∏ body - –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
			});

			if (response.ok) {
				const data = await response.json();
				const existingIds = data.existingDepartmentIds || [];
				console.log("üîç checkDepartmentsExistence API response:", { departmentIds, existingIds, data });
				setExistingDepartments(new Set(existingIds));
			} else {
				console.error("–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤:", response.status, response.statusText);
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤:", error);
		}
	}, []);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤
	const loadDepartmentsData = useCallback(async () => {
		console.log("üîç loadDepartmentsData called");
		setLoading(true);
		try {
			const response = await fetch(`/api/departments`, {
				credentials: "include",
			});

			if (response.ok) {
				const departments = await response.json();
				const departmentsMap = new Map<number, DepartmentForLog>(departments.map((dept: DepartmentForLog) => [dept.id, dept]));
				console.log("üîç loadDepartmentsData response:", { departments, departmentsMapKeys: Array.from(departmentsMap.keys()) });
				setDepartmentsData(departmentsMap);
			} else {
				console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤:", response.status, response.statusText);
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤:", error);
		} finally {
			setLoading(false);
		}
	}, []);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
	const loadCategoriesData = useCallback(async () => {
		try {
			const response = await fetch(`/api/categories`, {
				credentials: "include",
			});

			if (response.ok) {
				const categories = await response.json();
				const categoriesMap = new Map<number, { id: number; title: string }>(categories.map((cat: { id: number; title: string }) => [cat.id, cat]));
				setCategoriesData(categoriesMap);
			} else {
				console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", response.status, response.statusText);
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
		}
	}, []);

	const fetchLogs = useCallback(async () => {
		setLoading(true);
		setError(null);

		try {
			const response = await fetch(`/api/products/${productId}/logs?${queryParams.toString()}`);

			if (!response.ok) {
				throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏ —Ç–æ–≤–∞—Ä–∞");
			}

			const data: ProductLogResponse = await response.json();

			if (data.error) {
				throw new Error(data.error);
			}

			setLocalLogs(data.data || []);
			console.log(data.data);
			setTotalPages(data.totalPages || 1);

			// –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
			if (onLogsUpdate) {
				onLogsUpdate(data.totalPages || 1);
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–≥–æ–≤ (–∞–¥–º–∏–Ω–æ–≤)
			const userIdsToCheck = (data.data || []).flatMap((log: ProductLog) => [log.admin?.id]).filter((id: number | undefined) => id !== undefined && id !== 0) as number[];

			await checkUsersExistence(userIdsToCheck);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤ –∏–∑ –ª–æ–≥–æ–≤
			const departmentIdsToCheck = (data.data || [])
				.flatMap((log: ProductLog) => [log.admin?.department?.id, log.departmentSnapshot?.id, log.snapshotBefore?.department?.id, log.snapshotAfter?.department?.id])
				.filter((id: number | undefined | null) => id !== undefined && id !== null && id !== 0) as number[];

			console.log("üîç fetchLogs - departmentIdsToCheck:", departmentIdsToCheck);
			await checkDepartmentsExistence(departmentIdsToCheck);
			console.log("üîç fetchLogs - after checkDepartmentsExistence, existingDepartments:", Array.from(existingDepartments));
			console.log("üîç fetchLogs - departmentsData keys:", Array.from(departmentsData.keys()));
		} catch (err) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤:", err);
			setError(err instanceof Error ? err.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
		} finally {
			setLoading(false);
		}
	}, [productId, queryParams, onLogsUpdate, checkUsersExistence, checkDepartmentsExistence]);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const renderUserName = useCallback(
		(user: any) => {
			if (!user) return "‚Äî";

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			const userExists = existingUsers.has(user.id);
			// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ existingUsers
			const actualUser = existingUsers.get(user.id);

			if (userExists && actualUser) {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
				return `${actualUser.first_name || ""} ${actualUser.last_name || ""} ${actualUser.middle_name || ""}`.trim() || "‚Äî";
			} else {
				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–Ω–∞–ø—à–æ—Ç–∞
				return `${user.first_name || ""} ${user.last_name || ""} ${user.middle_name || ""}`.trim() || "‚Äî";
			}
		},
		[existingUsers]
	);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞ —Å —Å—Å—ã–ª–∫–æ–π, –µ—Å–ª–∏ –æ—Ç–¥–µ–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	const renderDepartment = useCallback(
		(department: DepartmentForLog | null | undefined, log: ProductLog) => {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –æ–±—ä–µ–∫—Ç–∞ department
			const targetDepartmentId = department?.id;
			// –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª–∞ –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏–π
			if (department === log.snapshotAfter?.department) {
				console.log("üîç –û–¢–î–ï–õ –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏–π:", {
					department,
					targetDepartmentId,
					existingDepartments: Array.from(existingDepartments),
					departmentsDataKeys: Array.from(departmentsData.keys()),
					logId: log.id,
					logAction: log.action,
				});
			}

			if (!targetDepartmentId) return "‚Äî";

			// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–∞ –∏–∑ departmentsData
			const actualDepartment = departmentsData.get(targetDepartmentId);
			const snapshotName = department?.name;
			const actualName = actualDepartment ? actualDepartment.name : snapshotName;

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º departmentsData –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
			const departmentExists = actualDepartment !== undefined;

			// –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª–∞ –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏–π
			if (department === log.snapshotAfter?.department) {
				console.log("üîç –ü–†–û–í–ï–†–ö–ê –æ—Ç–¥–µ–ª–∞ –ü–û–°–õ–ï:", {
					targetDepartmentId,
					departmentExists,
					actualDepartment,
					snapshotName,
					actualName,
					willShowDeleted: !departmentExists || !actualDepartment,
				});
			}

			if (departmentExists && actualDepartment) {
				// –ï—Å–ª–∏ –æ—Ç–¥–µ–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
				if (snapshotName === actualName) {
					// –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π
					return (
						<a href={`/admin/departments/${targetDepartmentId}`} className="itemLink">
							{actualName}
						</a>
					);
				} else {
					// –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–Ω–∞–ø—à–æ—Ç–∞ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–∫–æ–±–æ—á–∫–∞—Ö —Å–æ —Å—Å—ã–ª–∫–æ–π
					return (
						<span>
							{snapshotName}{" "}
							<a href={`/admin/departments/${targetDepartmentId}`} className="itemLink">
								({actualName})
							</a>
						</span>
					);
				}
			} else {
				console.log(log, departmentExists, actualDepartment);
				// –ï—Å–ª–∏ –æ—Ç–¥–µ–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–µ—Ç–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–∑ —Å–Ω–∞–ø—à–æ—Ç–∞
				return (
					<span>
						{snapshotName || `ID: ${targetDepartmentId}`} <span className="deletedItemStatus">(–æ—Ç–¥–µ–ª —É–¥–∞–ª—ë–Ω)</span>
					</span>
				);
			}
		},
		[departmentsData]
	);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å—Å—ã–ª–∫–æ–π, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	const renderCategoryLink = useCallback(
		(category: { id: number; title: string } | null | undefined) => {
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			const catId = category?.id;

			if (!catId) {
				return "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
			}

			// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ categoriesData
			const actualCategory = categoriesData.get(catId);
			const snapshotName = category?.title || `ID: ${catId}`;
			const actualName = actualCategory ? actualCategory.title : snapshotName;

			// –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ categoriesData –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
			const categoryExists = actualCategory !== undefined;

			if (categoryExists) {
				// –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
				if (snapshotName === actualName) {
					// –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π
					return (
						<a href={`/admin/categories/${catId}`} className="itemLink">
							{actualName}
						</a>
					);
				} else {
					// –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–Ω–∞–ø—à–æ—Ç–∞ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–∫–æ–±–æ—á–∫–∞—Ö —Å–æ —Å—Å—ã–ª–∫–æ–π
					return (
						<span>
							{snapshotName}{" "}
							<a href={`/admin/categories/${catId}`} className="itemLink">
								({actualName})
							</a>
						</span>
					);
				}
			} else {
				// –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–µ—Ç–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–∑ —Å–Ω–∞–ø—à–æ—Ç–∞
				return (
					<span>
						{snapshotName} <span className="deletedItemStatus">(–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞)</span>
					</span>
				);
			}
		},
		[categoriesData]
	);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∞
	const toggleActiveBlock = useCallback((logId: number | string) => {
		setActiveBlocks((prev) => ({
			...prev,
			[logId]: !prev[logId],
		}));
	}, []);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—â–∏–º—Å—è –±–ª–æ–∫–æ–º
	const renderUserBlock = useCallback(
		(
			log: ProductLog,
			user: { id: number; first_name?: string | null; last_name?: string | null; middle_name?: string | null; phone?: string; role?: string; department?: any },
			logId: number,
			userType: "admin"
		) => {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			const userExists = existingUsers.has(user.id);
			// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ existingUsers
			const actualUser = existingUsers.get(user.id);
			const userLogKey = `${userType}_${logId}_${user.id}`;

			return (
				<div key={userLogKey} className={`fullInfoBlock`}>
					<div className={`clickInfoBlock ${activeBlocks[userLogKey] ? "active" : ""}`} onClick={() => toggleActiveBlock(userLogKey)}>
						{renderUserName(user)}
					</div>
					<div className={`openingBlock ${activeBlocks[userLogKey] ? "active" : ""}`}>
						<div className="infoField">
							<span className="title">ID:</span>
							<span className="value">{user.id || "‚Äî"}</span>
						</div>
						<div className="infoField">
							<span className="title">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
							<span className="value">{user.phone || "‚Äî"}</span>
						</div>
						<div className="infoField">
							<span className="title">–†–æ–ª—å:</span>
							<span className="value">{user.role || "‚Äî"}</span>
						</div>
						<div className="infoField">
							<span className="title">–û—Ç–¥–µ–ª:</span>
							<span className="value">{renderDepartment(user.department, log)}</span>
						</div>
						{userExists ? (
							<div className="infoField">
								<span className="title">–ü—Ä–æ—Ñ–∏–ª—å:</span>
								<span className="value">
									<a href={`/admin/users/${user.id}`} className="itemLink">
										{actualUser?.last_name || ""} {actualUser?.first_name || ""} {actualUser?.middle_name || ""}
									</a>
								</span>
							</div>
						) : (
							<div className="infoField">
								<span className="title">–°—Ç–∞—Ç—É—Å:</span>
								<span className="value deletedItemStatus">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω</span>
							</div>
						)}
					</div>
				</div>
			);
		},
		[activeBlocks, toggleActiveBlock, existingUsers, renderUserName, renderDepartment]
	);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
	const formatDate = useCallback((dateString: string) => {
		if (!dateString) return "‚Äî";

		const date = new Date(dateString);

		return new Intl.DateTimeFormat("ru-RU", {
			day: "2-digit",
			month: "2-digit",
			year: "numeric",
		}).format(date);
	}, []);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	const getResultBlock = useCallback(
		(log: ProductLog) => {
			if (!log.snapshotBefore && !log.snapshotAfter) {
				return log.message || "‚Äî";
			}

			const resultLogKey = `result_${log.id}`;

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
			const titleChanged = log.snapshotBefore?.title !== log.snapshotAfter?.title;
			const skuChanged = log.snapshotBefore?.sku !== log.snapshotAfter?.sku;
			const brandChanged = log.snapshotBefore?.brand !== log.snapshotAfter?.brand;
			const priceChanged = log.snapshotBefore?.price !== log.snapshotAfter?.price;
			const categoryChanged = log.snapshotBefore?.categoryId !== log.snapshotAfter?.categoryId;
			const departmentChanged = log.snapshotBefore?.departmentId !== log.snapshotAfter?.departmentId;
			const descriptionChanged = log.snapshotBefore?.description !== log.snapshotAfter?.description;
			const imageChanged = log.snapshotBefore?.image !== log.snapshotAfter?.image;

			const hasChanges = titleChanged || skuChanged || brandChanged || priceChanged || categoryChanged || departmentChanged || descriptionChanged || imageChanged;

			return (
				<div key={resultLogKey} className={`fullInfoBlock`}>
					<div className={`clickInfoBlock ${activeBlocks[resultLogKey] ? "active" : ""}`} onClick={() => toggleActiveBlock(resultLogKey)}>
						{log.message || "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"}
					</div>
					<div className={`openingBlock ${activeBlocks[resultLogKey] ? "active" : ""}`}>
						{log.importLogId && (
							<div className="infoField">
								<span className="title">–ö–æ–Ω—Ç–µ–∫—Å—Ç:</span>
								<span className="value">
									<span className="importContext">–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤</span>
									<a href={`/admin/product-management/products/import/${log.importLogId}`} className="importLink">
										–ü–µ—Ä–µ–π—Ç–∏ –∫ –ª–æ–≥—É –∏–º–ø–æ—Ä—Ç–∞
									</a>
								</span>
							</div>
						)}

						{/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è */}
						{hasChanges && (
							<div className="changesTable">
								<table>
									<thead>
										<tr>
											<th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th>
											<th>–î–û –∏–∑–º–µ–Ω–µ–Ω–∏–π</th>
											<th>–ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏–π</th>
										</tr>
									</thead>
									<tbody>
										{titleChanged && (
											<tr>
												<td>–ù–∞–∑–≤–∞–Ω–∏–µ</td>
												<td className="oldValue">{log.snapshotBefore?.title || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</td>
												<td className="newValue">{log.snapshotAfter?.title || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</td>
											</tr>
										)}
										{skuChanged && (
											<tr>
												<td>SKU</td>
												<td className="oldValue">{log.snapshotBefore?.sku || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</td>
												<td className="newValue">{log.snapshotAfter?.sku || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</td>
											</tr>
										)}
										{brandChanged && (
											<tr>
												<td>–ë—Ä–µ–Ω–¥</td>
												<td className="oldValue">{log.snapshotBefore?.brand || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</td>
												<td className="newValue">{log.snapshotAfter?.brand || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</td>
											</tr>
										)}
										{priceChanged && (
											<tr>
												<td>–¶–µ–Ω–∞</td>
												<td className="oldValue">{log.snapshotBefore?.price || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</td>
												<td className="newValue">{log.snapshotAfter?.price || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</td>
											</tr>
										)}
										{categoryChanged && (
											<tr>
												<td>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</td>
												<td className="oldValue">{renderCategoryLink(log.snapshotBefore?.category)}</td>
												<td className="newValue">{renderCategoryLink(log.snapshotAfter?.category)}</td>
											</tr>
										)}
										{departmentChanged && (
											<tr>
												<td>–û—Ç–¥–µ–ª</td>
												<td className="oldValue">{renderDepartment(log.snapshotBefore?.department, log)}</td>
												<td className="newValue">{renderDepartment(log.snapshotAfter?.department, log)}</td>
											</tr>
										)}
										{descriptionChanged && (
											<tr>
												<td>–û–ø–∏—Å–∞–Ω–∏–µ</td>
												<td className="oldValue">{log.snapshotBefore?.description || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</td>
												<td className="newValue">{log.snapshotAfter?.description || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</td>
											</tr>
										)}
										{imageChanged && (
											<tr>
												<td>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</td>
												<td className="oldValue">
													{log.snapshotBefore?.image ? (
														<a href={log.snapshotBefore.image} target="_blank" rel="noopener noreferrer" className="itemLink">
															–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
														</a>
													) : (
														"–ù–µ —É–∫–∞–∑–∞–Ω–æ"
													)}
												</td>
												<td className="newValue">
													{log.snapshotAfter?.image ? (
														<a href={log.snapshotAfter.image} target="_blank" rel="noopener noreferrer" className="itemLink">
															–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
														</a>
													) : (
														"–£–¥–∞–ª–µ–Ω–æ"
													)}
												</td>
											</tr>
										)}
									</tbody>
								</table>
							</div>
						)}

						{/* –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
						{!hasChanges && log.snapshotAfter && (
							<div className="infoField">
								<span className="title">–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:</span>
								<span className="value">
									<div>–ù–∞–∑–≤–∞–Ω–∏–µ: {log.snapshotAfter.title || "‚Äî"}</div>
									<div>SKU: {log.snapshotAfter.sku || "‚Äî"}</div>
									<div>–ë—Ä–µ–Ω–¥: {log.snapshotAfter.brand || "‚Äî"}</div>
									<div>–¶–µ–Ω–∞: {log.snapshotAfter.price || "‚Äî"}</div>
									<div>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {renderCategoryLink(log.snapshotAfter.category)}</div>
									<div>–û—Ç–¥–µ–ª: {log.departmentSnapshot?.name || "‚Äî"}</div>
									<div>–û–ø–∏—Å–∞–Ω–∏–µ: {log.snapshotAfter.description || "‚Äî"}</div>
									<div>
										–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:{" "}
										{log.snapshotAfter.image ? (
											<a href={log.snapshotAfter.image} target="_blank" rel="noopener noreferrer" className="itemLink">
												–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
											</a>
										) : (
											"–ù–µ —É–∫–∞–∑–∞–Ω–æ"
										)}
									</div>
								</span>
							</div>
						)}
					</div>
				</div>
			);
		},
		[activeBlocks, toggleActiveBlock]
	);

	useEffect(() => {
		loadDepartmentsData();
	}, [loadDepartmentsData]);

	useEffect(() => {
		loadCategoriesData();
	}, [loadCategoriesData]);

	useEffect(() => {
		if (productId) {
			fetchLogs();
		}
	}, [fetchLogs, productId]);

	if (error) {
		return <div>–û—à–∏–±–∫–∞: {error}</div>;
	}

	return (
		<div className={`tableContent`}>
			<table>
				<thead>{tableHeaders}</thead>
				<tbody>
					{loading ? (
						<tr>
							<td colSpan={3}>
								<Loading />
							</td>
						</tr>
					) : localLogs.length > 0 ? (
						localLogs.map((log) => {
							// console.log(log);
							return (
								<tr key={log.id}>
									<td>
										<div className="date">{formatDate(log.createdAt)}</div>
									</td>
									<td>{log.admin ? renderUserBlock(log, log.admin, log.id, "admin") : "‚Äî"}</td>
									<td>{getResultBlock(log)}</td>
								</tr>
							);
						})
					) : (
						<tr>
							<td colSpan={3}>–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td>
						</tr>
					)}
				</tbody>
			</table>
		</div>
	);
}
