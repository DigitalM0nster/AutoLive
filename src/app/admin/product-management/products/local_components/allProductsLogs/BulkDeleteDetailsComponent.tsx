"use client";

import { useState, useMemo, useCallback, useEffect } from "react";
import Loading from "@/components/ui/loading/Loading";
import Pagination from "@/components/ui/pagination/Pagination";
import CustomSelect from "@/components/ui/customSelect/CustomSelect";

type Props = {
	bulkLogId: number;
	productsSnapshot: any[];
	onClose: () => void;
};

export default function BulkDeleteDetailsComponent({ bulkLogId, productsSnapshot, onClose }: Props) {
	console.log("üì¶ BulkDeleteDetailsComponent - productsSnapshot:", productsSnapshot);

	const [currentPage, setCurrentPage] = useState(1);
	const [productSearch, setProductSearch] = useState("");
	const [departmentFilter, setDepartmentFilter] = useState("all");
	const [activeBlocks, setActiveBlocks] = useState<Record<string, boolean>>({});

	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–¥–µ–ª–∞–º–∏
	const [existingDepartments, setExistingDepartments] = useState<Set<number>>(new Set());
	const [departmentsData, setDepartmentsData] = useState<Map<number, { id: number; name: string }>>(new Map());

	const limit = 10;

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∞
	const toggleActiveBlock = useCallback((logId: number | string) => {
		setActiveBlocks((prev) => ({
			...prev,
			[logId]: !prev[logId],
		}));
	}, []);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤
	const checkDepartmentsExistence = useCallback(async () => {
		try {
			// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –æ—Ç–¥–µ–ª–æ–≤ –∏–∑ productsSnapshot
			const departmentIds = productsSnapshot.map((product) => product.department?.id).filter((id) => id !== undefined && id !== null);

			console.log("üîç ID –æ—Ç–¥–µ–ª–æ–≤ –∏–∑ productsSnapshot:", departmentIds);

			if (departmentIds.length === 0) {
				console.log("üîç –ù–µ—Ç –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏");
				setExistingDepartments(new Set());
				return;
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ URL
			const params = new URLSearchParams();
			params.set("departmentIds", departmentIds.join(","));
			const url = `/api/departments/check-existence?${params.toString()}`;

			const response = await fetch(url, {
				method: "GET",
				credentials: "include",
			});

			if (response.ok) {
				const data = await response.json();
				const existingIds = data.existingDepartmentIds || [];
				console.log("üîç –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–¥–µ–ª—ã:", existingIds);
				setExistingDepartments(new Set(existingIds));
			} else {
				console.error("–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤:", response.status, response.statusText);
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤:", error);
		}
	}, [productsSnapshot]);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤
	const loadDepartmentsData = useCallback(async () => {
		try {
			const response = await fetch(`/api/departments`, {
				credentials: "include",
			});

			if (response.ok) {
				const departments = await response.json();
				console.log("üè¢ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–æ–≤:", departments);
				const departmentsMap = new Map<number, { id: number; name: string }>(departments.map((dept: { id: number; name: string }) => [dept.id, dept]));
				setDepartmentsData(departmentsMap);
			} else {
				console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤:", response.status, response.statusText);
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤:", error);
		}
	}, []);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞ —Å —Å—Å—ã–ª–∫–æ–π, –µ—Å–ª–∏ –æ—Ç–¥–µ–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	const renderDepartmentLink = useCallback(
		(department: any) => {
			if (!department || !department.id) {
				return "‚Äî";
			}

			console.log("üîç –†–µ–Ω–¥–µ—Ä –æ—Ç–¥–µ–ª–∞:", department);
			console.log("üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–¥–µ–ª—ã:", Array.from(existingDepartments));
			console.log("üîç –î–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–æ–≤:", Array.from(departmentsData.entries()));

			const departmentExists = existingDepartments.has(department.id);
			console.log("üîç –û—Ç–¥–µ–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?", departmentExists, "–¥–ª—è ID:", department.id);

			// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞
			const actualDepartment = departmentsData.get(department.id);
			const snapshotName = department.name;
			const actualName = actualDepartment ? actualDepartment.name : snapshotName;

			if (departmentExists) {
				// –ï—Å–ª–∏ –æ—Ç–¥–µ–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
				if (snapshotName === actualName) {
					// –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π
					return (
						<a href={`/admin/departments/${department.id}`} className="itemLink">
							{actualName}
						</a>
					);
				} else {
					// –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–Ω–∞–ø—à–æ—Ç–∞ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–∫–æ–±–æ—á–∫–∞—Ö —Å–æ —Å—Å—ã–ª–∫–æ–π
					return (
						<span>
							{snapshotName}{" "}
							<a href={`/admin/departments/${department.id}`} className="itemLink">
								({actualName})
							</a>
						</span>
					);
				}
			} else {
				// –ï—Å–ª–∏ –æ—Ç–¥–µ–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–µ—Ç–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–∑ —Å–Ω–∞–ø—à–æ—Ç–∞
				return (
					<span>
						{snapshotName} <span className="deletedItemStatus">(–æ—Ç–¥–µ–ª —É–¥–∞–ª—ë–Ω)</span>
					</span>
				);
			}
		},
		[existingDepartments, departmentsData]
	);

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
	const handleProductSearchChange = useCallback((value: string) => {
		setProductSearch(value);
		setCurrentPage(1);
	}, []);

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –æ—Ç–¥–µ–ª—É
	const handleDepartmentChange = useCallback((value: string) => {
		setDepartmentFilter(value);
		setCurrentPage(1);
	}, []);

	// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
	const filteredProducts = useMemo(() => {
		return productsSnapshot.filter((product) => {
			const matchesSearch =
				productSearch === "" ||
				product.title?.toLowerCase().includes(productSearch.toLowerCase()) ||
				product.sku?.toLowerCase().includes(productSearch.toLowerCase()) ||
				product.brand?.toLowerCase().includes(productSearch.toLowerCase());

			const matchesDepartment = departmentFilter === "all" || product.department?.name === departmentFilter;

			return matchesSearch && matchesDepartment;
		});
	}, [productSearch, departmentFilter, productsSnapshot]);

	// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
	const totalPages = Math.ceil(filteredProducts.length / limit);
	const pageItems = filteredProducts.slice((currentPage - 1) * limit, currentPage * limit);

	// –û–ø—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –æ—Ç–¥–µ–ª—É
	const departmentOptions = useMemo(() => {
		const departments = new Set<string>();
		productsSnapshot.forEach((product) => {
			if (product.department?.name) {
				departments.add(product.department.name);
			}
		});

		return [
			{ value: "all", label: "–í—Å–µ –æ—Ç–¥–µ–ª—ã" },
			...Array.from(departments)
				.sort()
				.map((dept) => ({
					value: dept,
					label: dept,
				})),
		];
	}, [productsSnapshot]);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—â–∏–º—Å—è –±–ª–æ–∫–æ–º
	const renderProductBlock = useCallback(
		(product: any, index: number) => {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç ID
			if (!product || !product.id) {
				return "‚Äî";
			}

			const productKey = `product_${index}_${product.id}`;

			return (
				<div key={productKey} className={`fullInfoBlock`}>
					<div className={`clickInfoBlock ${activeBlocks[productKey] ? "active" : ""}`} onClick={() => toggleActiveBlock(productKey)}>
						{product.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}
					</div>
					<div className={`openingBlock ${activeBlocks[productKey] ? "active" : ""}`}>
						<div className="infoField">
							<span className="title">ID:</span>
							<span className="value">{product.id || "‚Äî"}</span>
						</div>
						<div className="infoField">
							<span className="title">SKU:</span>
							<span className="value">{product.sku || "‚Äî"}</span>
						</div>
						<div className="infoField">
							<span className="title">–ë—Ä–µ–Ω–¥:</span>
							<span className="value">{product.brand || "‚Äî"}</span>
						</div>
						<div className="infoField">
							<span className="title">–¶–µ–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ:</span>
							<span className="value">{product.price ? `${product.price} ‚ÇΩ` : "‚Äî"}</span>
						</div>
						<div className="infoField">
							<span className="title">–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:</span>
							<span className="value">{product.supplierPrice ? `${product.supplierPrice} ‚ÇΩ` : "‚Äî"}</span>
						</div>
						<div className="infoField">
							<span className="title">–û–ø–∏—Å–∞–Ω–∏–µ:</span>
							<span className="value">{product.description || "‚Äî"}</span>
						</div>
						<div className="infoField">
							<span className="title">–û—Ç–¥–µ–ª:</span>
							<span className="value">{renderDepartmentLink(product.department)}</span>
						</div>
						<div className="infoField">
							<span className="title">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
							<span className="value">{product.category?.title || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}</span>
						</div>
						<div className="infoField">
							<span className="title">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</span>
							<span className="value">
								{product.image ? (
									<a href={product.image} target="_blank" rel="noopener noreferrer" className="itemLink">
										–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
									</a>
								) : (
									"–ù–µ —É–∫–∞–∑–∞–Ω–æ"
								)}
							</span>
						</div>
					</div>
				</div>
			);
		},
		[activeBlocks, toggleActiveBlock, renderDepartmentLink]
	);

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	useEffect(() => {
		checkDepartmentsExistence();
		loadDepartmentsData();
	}, [checkDepartmentsExistence, loadDepartmentsData]);

	return (
		<div className="importDetailsModal">
			<div className="importDetailsBackground" onClick={onClose} />
			<div className="importDetailsCloseButton" onClick={onClose}>
				<div className="line" />
				<div className="line" />
			</div>
			<div className="importDetailsContent">
				<div className="importDetailsHeader">
					<h3>–î–µ—Ç–∞–ª–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è</h3>
				</div>

				<div className="importDetailsFilters">
					<div className="filterGroup">
						<label>–ü–æ–∏—Å–∫ –ø–æ —Ç–æ–≤–∞—Ä—É:</label>
						<div className="searchInput">
							<input
								type="text"
								value={productSearch}
								onChange={(e) => handleProductSearchChange(e.target.value)}
								placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –±—Ä–µ–Ω–¥ –∏–ª–∏ SKU"
								className="searchInput"
							/>
						</div>
					</div>

					<div className="filterGroup">
						<label>–û—Ç–¥–µ–ª:</label>
						<CustomSelect options={departmentOptions} value={departmentFilter} onChange={handleDepartmentChange} placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª" />
					</div>
				</div>

				<div className="importDetailsTable">
					{pageItems.length > 0 ? (
						<table>
							<thead>
								<tr>
									<th className="idCell">ID</th>
									<th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
									<th>SKU</th>
									<th>–ë—Ä–µ–Ω–¥</th>
									<th>–î–µ—Ç–∞–ª–∏</th>
								</tr>
							</thead>
							<tbody>
								{pageItems.map((product, index) => (
									<tr key={product.id || index}>
										<td className="idCell">{product.id || "‚Äî"}</td>
										<td>{product.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}</td>
										<td>{product.sku || "‚Äî"}</td>
										<td>{product.brand || "‚Äî"}</td>
										<td>{renderProductBlock(product, index)}</td>
									</tr>
								))}
							</tbody>
						</table>
					) : (
						<div className="noDataMessage">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
					)}
				</div>

				{totalPages > 1 && (
					<div className="importDetailsPagination">
						<Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={setCurrentPage} />
					</div>
				)}

				<div className="importDetailsInfo">
					–ü–æ–∫–∞–∑–∞–Ω–æ {pageItems.length} –∏–∑ {filteredProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ (–≤—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {productsSnapshot.length})
				</div>
			</div>
		</div>
	);
}
