// src\app\admin\profile\page.tsx

"use client";

import { useEffect, useState } from "react";
import ProfileSkeleton from "./local_components/ProfileSkeleton";
import { showErrorToast, showSuccessToast } from "@/components/ui/toast/toastService";
import { CameraIcon, XIcon } from "lucide-react";
import { useAuthStore } from "@/store/authStore";

export default function AdminProfilePage() {
	const [firstName, setFirstName] = useState("");
	const [lastName, setLastName] = useState("");
	const [phone, setPhone] = useState("");
	const [avatar, setAvatar] = useState<string | null>(null);
	const [avatarFile, setAvatarFile] = useState<File | null>(null);

	const [currentPassword, setCurrentPassword] = useState("");
	const [newPassword, setNewPassword] = useState("");

	const [isProfileLoaded, setIsProfileLoaded] = useState(false); // üÜï —Ñ–ª–∞–≥: –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏
	const [isFormSubmitting, setIsFormSubmitting] = useState(false); // üü¶ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
	const [isDataLoading, setIsDataLoading] = useState(true); // üü® –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	const [message, setMessage] = useState("");

	const [errors, setErrors] = useState<{ currentPassword?: boolean; newPassword?: boolean }>({});

	useEffect(() => {
		const fetchData = async () => {
			try {
				const res = await fetch("/api/admin/get-admin-data");
				if (res.ok) {
					const data = await res.json();
					console.log("–î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞:", data);
					setFirstName(data.first_name || "");
					setLastName(data.last_name || "");
					setPhone(data.phone || "");
					setAvatar(data.avatar || null);
					setIsProfileLoaded(true);
				}
			} catch (error) {
				console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:", error);
				setMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.");
				setIsProfileLoaded(false);
			} finally {
				setIsDataLoading(false); // ‚¨ÖÔ∏è —É–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
			}
		};
		fetchData();
	}, []);

	const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		const file = e.target.files?.[0];
		if (file) {
			setAvatarFile(file);
			const reader = new FileReader();
			reader.onload = () => {
				setAvatar(reader.result as string);
			};
			reader.readAsDataURL(file);
		}
	};
	const handleSubmit = async (e: React.FormEvent) => {
		e.preventDefault();
		setIsFormSubmitting(true);
		setErrors({}); // —Å–±—Ä–æ—Å –æ—à–∏–±–æ–∫

		// –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
		if ((currentPassword && !newPassword) || (!currentPassword && newPassword)) {
			setErrors({
				currentPassword: !currentPassword,
				newPassword: !newPassword,
			});
			showErrorToast("–£–∫–∞–∂–∏—Ç–µ –∏ —Ç–µ–∫—É—â–∏–π, –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å");
			setIsFormSubmitting(false);
			return;
		}

		if (newPassword && newPassword.length < 4) {
			setErrors({ newPassword: true });
			showErrorToast("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω. 4 —Å–∏–º–≤–æ–ª–∞)");
			setIsFormSubmitting(false);
			return;
		}

		const formData = new FormData();
		formData.append("first_name", firstName);
		formData.append("last_name", lastName);
		formData.append("phone", phone);
		if (avatarFile) {
			formData.append("avatar", avatarFile);
		} else if (avatar === null) {
			formData.append("removeAvatar", "true");
		}
		if (currentPassword && newPassword) {
			formData.append("currentPassword", currentPassword);
			formData.append("newPassword", newPassword);
		}

		try {
			const res = await fetch("/api/admin/profile/update", {
				method: "POST",
				body: formData,
			});
			const data = await res.json();

			if (res.ok) {
				showSuccessToast("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω");
				setCurrentPassword("");
				setNewPassword("");

				// –æ–±–Ω–æ–≤–∏–º user –≤ store
				await useAuthStore.getState().initAuth();
			} else {
				// –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø–∞—Ä–æ–ª–µ
				if (data.message === "–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω") {
					setErrors({ currentPassword: true });
				}
				showErrorToast(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
			showErrorToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.");
		} finally {
			setIsFormSubmitting(false);
		}
	};

	// –ó–ê–ì–õ–£–®–ö–ê –í–û –í–†–ï–ú–Ø –ó–ê–ì–†–£–ó–ö–ò
	if (isDataLoading) {
		return <ProfileSkeleton />;
	}

	// –ï–°–õ–ò –î–ê–ù–ù–´–ï –ù–ï –ü–†–ò–®–õ–ò
	if (!isProfileLoaded) {
		return (
			<div className="max-w-xl mx-auto mt-28 p-6 bg-white border border-black/10 rounded-xl shadow text-center text-red-700">
				<h2 className="text-xl font-semibold mb-2">–û—à–∏–±–∫–∞</h2>
				<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
			</div>
		);
	}

	return (
		<div className="max-w-2xl mx-auto mt-28 p-6 bg-white rounded-xl shadow border">
			<h1 className="text-2xl font-bold mb-6 text-center">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</h1>

			<form onSubmit={handleSubmit} className="space-y-8">
				{/* AVATAR */}
				<div className="flex justify-center">
					<div className="relative group w-36 h-36 sm:w-40 sm:h-40">
						{/* –§–æ—Ç–æ */}
						<img
							src={avatar || "/images/user_placeholder.png"}
							alt="avatar"
							className="w-full h-full rounded-full object-cover border-4 border-white shadow-md transition duration-300 group-hover:brightness-90"
						/>

						{/* –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ + –∏–∫–æ–Ω–∫–∞ –∫–∞–º–µ—Ä—ã */}
						<label className="absolute inset-0 flex items-center justify-center rounded-full bg-black/20 opacity-0 group-hover:opacity-100 transition cursor-pointer pointer-events-auto">
							<CameraIcon className="w-6 h-6 text-white" />
							<input type="file" accept="image/*" onChange={handleAvatarChange} className="hidden" />
						</label>

						{/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
						<button
							type="button"
							onClick={() => {
								setAvatar(null);
								setAvatarFile(null);
							}}
							className="absolute top-1 right-1 bg-red-600 hover:bg-red-700 text-white rounded-full p-1 shadow transition pointer-events-auto"
							title="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ"
						>
							<XIcon className="w-4 h-4" />
						</button>
					</div>
				</div>

				{/* –û–°–ù–û–í–ù–û–ï */}
				<div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
					<div>
						<label className="block text-sm font-medium mb-1">–ò–º—è</label>
						<input
							type="text"
							value={firstName}
							placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
							onChange={(e) => setFirstName(e.target.value)}
							className="w-full border border-black/10 rounded px-3 py-2"
						/>
					</div>
					<div>
						<label className="block text-sm font-medium mb-1">–§–∞–º–∏–ª–∏—è</label>
						<input
							type="text"
							value={lastName}
							placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
							onChange={(e) => setLastName(e.target.value)}
							className="w-full border border-black/10 rounded px-3 py-2"
						/>
					</div>
					<div className="sm:col-span-2">
						<label className="block text-sm font-medium mb-1">–¢–µ–ª–µ—Ñ–æ–Ω (–ª–æ–≥–∏–Ω)</label>
						<input
							type="text"
							value={phone}
							placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
							onChange={(e) => setPhone(e.target.value)}
							className="w-full border border-black/10 rounded px-3 py-2"
						/>
					</div>
				</div>

				{/* –ü–ê–†–û–õ–¨ */}
				<div className="pt-4 border-t">
					<h2 className="text-lg font-semibold mb-2">–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h2>
					<div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
						<input
							type="password"
							placeholder="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
							value={currentPassword}
							onChange={(e) => {
								setCurrentPassword(e.target.value);
								if (errors.currentPassword) setErrors((prev) => ({ ...prev, currentPassword: false }));
							}}
							className={`w-full border border-black/10 rounded px-3 py-2 ${errors.currentPassword ? "border-red-500 text-red-700 placeholder-red-400" : ""}`}
						/>
						<input
							type="password"
							placeholder="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
							value={newPassword}
							onChange={(e) => {
								setNewPassword(e.target.value);
								if (errors.newPassword) setErrors((prev) => ({ ...prev, newPassword: false }));
							}}
							className={`w-full border border-black/10 rounded px-3 py-2 ${errors.newPassword ? "border-red-500 text-red-700 placeholder-red-400" : ""}`}
						/>
					</div>
				</div>

				{/* –ö–ù–û–ü–ö–ê */}
				<div className="text-center">
					<button type="submit" disabled={isFormSubmitting} className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700">
						{isFormSubmitting ? "–°–æ—Ö—Ä–∞–Ω—è–µ–º..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"}
					</button>
					{message && (
						<p className={`mt-3 text-sm px-4 py-2 rounded ${message.startsWith("‚úÖ") ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`}>{message}</p>
					)}
				</div>
			</form>
		</div>
	);
}
