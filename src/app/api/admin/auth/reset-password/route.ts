// src/app/api/admin/auth/reset-password/route.ts

import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import bcrypt from "bcryptjs";

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 4-—Ö –∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
const generateCode = () => Math.floor(1000 + Math.random() * 9000).toString();

export async function POST(req: NextRequest) {
	try {
		const { phone } = await req.json();

		if (!phone) {
			return NextResponse.json({ error: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω" }, { status: 400 });
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
		const admin = await prisma.user.findUnique({ where: { phone } });

		if (!admin) {
			return NextResponse.json({ error: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Ö–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
		const newPassword = generateCode();
		const hashedPassword = await bcrypt.hash(newPassword, 10);

		await prisma.user.update({
			where: { phone },
			data: { password: hashedPassword },
		});

		console.log(`üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${phone}: ${newPassword}`);
		// –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤ production-—Ä–µ–∂–∏–º–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç–µ,
		// –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –µ–≥–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ SMS –∏–ª–∏ email

		return NextResponse.json({
			success: true,
			message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω",
			newPassword, // –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–≤ –±—É–¥—É—â–µ–º —É–±—Ä–∞—Ç—å)
		});
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", error);
		return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ" }, { status: 500 });
	}
}
