import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";
import { withPermission } from "@/middleware/permissionMiddleware";

interface ExtendedRequestContext {
	user: any;
	scope: string;
}

export const GET = withPermission(
	async (req: NextRequest, { user }: ExtendedRequestContext) => {
		try {
			const { searchParams } = new URL(req.url);
			const page = parseInt(searchParams.get("page") || "1", 10);
			const limit = parseInt(searchParams.get("limit") || "10", 10);
			const skip = (page - 1) * limit;

			// –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è product_log
			// –í –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ –ù–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–º–ø–æ—Ä—Ç–æ–º
			const where: any = {
				import_log_id: null, // –ò—Å–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
			};

			// –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
			const targetProductId = searchParams.get("targetProductId");
			if (targetProductId) {
				// –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–≥–∏, –≥–¥–µ targetProductId –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ snapshotBefore –∏–ª–∏ snapshotAfter
				// –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
			}

			// –§–∏–ª—å—Ç—Ä –ø–æ –¥–µ–π—Å—Ç–≤–∏—é
			const action = searchParams.get("action");
			if (action && action !== "all") {
				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–Ω–∞–ø—à–æ—Ç–∞—Ö
				// –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
			}

			// –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
			const startDate = searchParams.get("startDate");
			const endDate = searchParams.get("endDate");
			if (startDate || endDate) {
				where.created_at = {};
				if (startDate) {
					where.created_at.gte = new Date(startDate);
				}
				if (endDate) {
					where.created_at.lte = new Date(endDate + "T23:59:59.999Z");
				}
			}

			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã product_log (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
			const logs = await prisma.product_log.findMany({
				where,
				orderBy: {
					created_at: "desc",
				},
			});

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
			const baseTotal = await prisma.product_log.count({
				where,
			});

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–≥–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
			let formattedLogs = logs.map((log) => {
				const userSnapshot = log.user_snapshot as any;
				const departmentSnapshot = log.department_snapshot as any;
				const snapshotBefore = log.snapshot_before ? JSON.parse(log.snapshot_before) : null;
				const snapshotAfter = log.snapshot_after ? JSON.parse(log.snapshot_after) : null;

				// –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ª–æ–≥–∞
				if (log.id === logs[0]?.id) {
					console.log("API logs - snapshotBefore:", snapshotBefore);
					console.log("API logs - snapshotBefore.department:", snapshotBefore?.department);
				}

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ action –∏–∑ product_log
				const determinedAction = log.action;

				return {
					id: log.id,
					createdAt: log.created_at,
					action: determinedAction,
					message: log.message,
					admin: userSnapshot
						? {
								id: userSnapshot.id,
								first_name: userSnapshot.first_name,
								last_name: userSnapshot.last_name,
								middle_name: userSnapshot.middle_name,
								phone: userSnapshot.phone,
								role: userSnapshot.role,
								department: userSnapshot.department,
						  }
						: null,
					targetProduct: snapshotBefore
						? {
								id: snapshotBefore.id,
								title: snapshotBefore.title,
								sku: snapshotBefore.sku,
								brand: snapshotBefore.brand,
								price: snapshotBefore.price,
								category: snapshotBefore.category,
								description: snapshotBefore.description,
								department: snapshotBefore.department,
						  }
						: null,
					department: departmentSnapshot
						? {
								id: departmentSnapshot.id,
								name: departmentSnapshot.name,
						  }
						: null,
					snapshotBefore,
					snapshotAfter,
					userSnapshot,
					departmentSnapshot,
					importLogId: log.import_log_id,
				};
			});

			// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–µ–π—Å—Ç–≤–∏—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
			if (action && action !== "all") {
				formattedLogs = formattedLogs.filter((log) => log.action === action);
			}

			// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
			const adminSearch = searchParams.get("adminSearch");
			if (adminSearch && adminSearch.trim() !== "") {
				const searchTerm = adminSearch.trim().toLowerCase();
				formattedLogs = formattedLogs.filter((log) => {
					if (!log.admin) return false;

					// –ü–æ–∏—Å–∫ –ø–æ ID (–µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ)
					if (!isNaN(Number(searchTerm)) && log.admin.id === parseInt(searchTerm)) {
						return true;
					}

					// –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
					if (log.admin.phone && log.admin.phone.toLowerCase().includes(searchTerm)) {
						return true;
					}

					// –ü–æ–∏—Å–∫ –ø–æ –§–ò–û
					const adminName = `${log.admin.last_name || ""} ${log.admin.first_name || ""} ${log.admin.middle_name || ""}`.trim().toLowerCase();
					if (adminName.includes(searchTerm)) {
						return true;
					}

					return false;
				});
			}

			// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É (targetProductId)
			if (targetProductId) {
				const targetProductIdNum = parseInt(targetProductId);
				formattedLogs = formattedLogs.filter((log) => {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º targetProduct (snapshotAfter –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
					if (log.targetProduct && log.targetProduct.id === targetProductIdNum) {
						return true;
					}

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º snapshotBefore –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
					if (log.snapshotBefore && log.snapshotBefore.id === targetProductIdNum) {
						return true;
					}

					return false;
				});
			}

			// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
			const targetProductSearch = searchParams.get("targetProductSearch");
			if (targetProductSearch && targetProductSearch.trim() !== "") {
				const searchTerm = targetProductSearch.trim().toLowerCase();
				formattedLogs = formattedLogs.filter((log) => {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º targetProduct (snapshotAfter –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
					if (log.targetProduct) {
						const targetProductName = log.targetProduct.title?.toLowerCase() || "";
						const targetProductSku = log.targetProduct.sku?.toLowerCase() || "";
						const targetProductBrand = log.targetProduct.brand?.toLowerCase() || "";

						if (targetProductName.includes(searchTerm) || targetProductSku.includes(searchTerm) || targetProductBrand.includes(searchTerm)) {
							return true;
						}
					}

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º snapshotBefore –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
					if (log.snapshotBefore) {
						const snapshotBeforeName = log.snapshotBefore.title?.toLowerCase() || "";
						const snapshotBeforeSku = log.snapshotBefore.sku?.toLowerCase() || "";
						const snapshotBeforeBrand = log.snapshotBefore.brand?.toLowerCase() || "";

						if (snapshotBeforeName.includes(searchTerm) || snapshotBeforeSku.includes(searchTerm) || snapshotBeforeBrand.includes(searchTerm)) {
							return true;
						}
					}

					return false;
				});
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
			const total = formattedLogs.length;

			// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
			const paginatedLogs = formattedLogs.slice(skip, skip + limit);

			const totalPages = Math.ceil(total / limit);

			return NextResponse.json({
				data: paginatedLogs,
				total,
				totalPages,
				currentPage: page,
			});
		} catch (err) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", err);
			return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
		}
	},
	"view_products_logs",
	["superadmin", "admin", "manager"]
);

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export const DELETE = withPermission(
	async (req: NextRequest, { user }: ExtendedRequestContext) => {
		try {
			// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
			const { searchParams } = new URL(req.url);
			const confirm = searchParams.get("confirm");

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
			if (confirm !== "true") {
				return NextResponse.json({ error: "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (confirm=true)" }, { status: 400 });
			}

			// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
			const logsCount = await prisma.changeLog.count({
				where: {
					entityType: "product",
				},
			});

			// –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–æ–≥–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
			const deleteResult = await prisma.changeLog.deleteMany({
				where: {
					entityType: "product",
				},
			});

			console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deleteResult.count} –ª–æ–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${user.id}`);

			return NextResponse.json({
				success: true,
				message: `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${deleteResult.count} –ª–æ–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤`,
				deletedCount: deleteResult.count,
				totalBeforeDeletion: logsCount,
			});
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", error);
			return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤" }, { status: 500 });
		}
	},
	"view_products_logs", // ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
	["superadmin"] // ‚úÖ –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –≤—Å–µ –ª–æ–≥–∏
);
