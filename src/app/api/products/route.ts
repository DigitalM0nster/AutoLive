// src/app/api/products/route.ts

import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";
import { Prisma } from "@prisma/client";
import { withPermission } from "@/middleware/permissionMiddleware";

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–ª—É—á–∞–µ–º—ã–π –∏–∑ Prisma —Å –≤–∫–ª—é—á—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
type ProductWithCategory = Prisma.ProductGetPayload<{
	include: { category: true };
}>;

// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç—É
type ProductResponse = {
	id: number;
	sku: string;
	title: string;
	description: string | null;
	price: number;
	brand: string;
	image: string | null;
	createdAt: Date;
	updatedAt: string; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É (ISO)
	categoryId: number | null;
	departmentId: number | null;
	categoryTitle: string;
};

// üîê GET ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è admin/superadmin/manager
export const GET = withPermission(
	async (req, { user, scope }) => {
		const { searchParams } = new URL(req.url);

		const sortBy = searchParams.get("sortBy") || "createdAt";
		const order = searchParams.get("order") === "asc" ? "asc" : "desc";
		const onlyStale = searchParams.get("onlyStale") === "true";

		const cursor = searchParams.get("cursor");
		const limit = parseInt(searchParams.get("limit") || "10");
		const brand = searchParams.get("brand") || undefined;
		const categoryId = searchParams.get("categoryId") || undefined;
		const search = searchParams.get("search")?.toLowerCase();

		const searchFilter: Prisma.ProductWhereInput[] = search ? [{ title: { contains: search } }, { sku: { contains: search } }, { brand: { contains: search } }] : [];

		const where: Prisma.ProductWhereInput = {
			...(brand && { brand }),
			...(categoryId && { categoryId: parseInt(categoryId) }),
			...(search && { OR: searchFilter }),
			...(onlyStale && {
				updatedAt: {
					lt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 30),
				},
			}),
			// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ç–¥–µ–ª—É (–µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω —Å department scope)
			...(scope === "department" && user.departmentId ? { departmentId: user.departmentId } : {}),
		};

		const orderBy: Prisma.ProductOrderByWithRelationInput = sortBy === "categoryTitle" ? { category: { title: order } } : { [sortBy]: order };

		try {
			const queryOptions: Parameters<typeof prisma.product.findMany>[0] = {
				where,
				take: limit,
				orderBy,
				include: { category: true },
			};

			if (cursor) {
				queryOptions.cursor = { id: parseInt(cursor) };
				queryOptions.skip = 1;
			}

			// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã; —Ç–∏–ø ‚Äì ProductWithCategory[]
			const products = await prisma.product.findMany({
				...queryOptions,
				include: { category: true },
			});

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ —Ç–∏–ø, —É–¥–æ–±–Ω—ã–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (ProductResponse)
			const mappedProducts: ProductResponse[] = products.map((p) => ({
				id: p.id,
				sku: p.sku,
				title: p.title,
				description: p.description,
				price: p.price,
				brand: p.brand,
				image: p.image,
				createdAt: p.createdAt,
				updatedAt: p.updatedAt.toISOString(),
				categoryId: p.categoryId,
				departmentId: p.departmentId,
				categoryTitle: p.category?.title || "‚Äî",
			}));

			const nextCursor = products.length === limit ? products[products.length - 1].id : null;

			// –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –≤ NextResponse.json
			return NextResponse.json<{
				products: ProductResponse[];
				nextCursor: number | null;
				limit: number;
			}>({
				products: mappedProducts,
				nextCursor,
				limit,
			});
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:", error);
			return new NextResponse("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", { status: 500 });
		}
	},
	"edit_products",
	["superadmin", "admin", "manager"]
); // –î–æ—Å—Ç—É–ø –¥–ª—è —á—Ç–µ–Ω–∏—è

// üëá POST ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤)
export const POST = withPermission(
	async (req, { user }) => {
		const body = await req.json();

		if (
			typeof body.title !== "string" ||
			body.title.trim() === "" ||
			typeof body.sku !== "string" ||
			body.sku.trim() === "" ||
			typeof body.brand !== "string" ||
			body.brand.trim() === "" ||
			typeof body.price !== "number" ||
			isNaN(body.price)
		) {
			return NextResponse.json({ error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: title, sku, brand, price" }, { status: 400 });
		}

		try {
			const product = await prisma.product.create({
				data: {
					title: body.title,
					description: body.description,
					sku: body.sku,
					price: body.price,
					brand: body.brand,
					categoryId: body.categoryId,
					image: body.image,
					departmentId: user.departmentId ?? null,
				},
			});
			return NextResponse.json({ product });
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
			return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
		}
	},
	"edit_products",
	["superadmin", "admin"]
);
