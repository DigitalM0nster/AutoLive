import { NextResponse } from "next/server";
import { read, utils } from "xlsx";
import { prisma } from "@/lib/prisma";
import { withPermission } from "@/middleware/permissionMiddleware";
import { Permission } from "@/lib/rolesConfig";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å
const CHUNK_SIZE = 1000;
const CONCURRENCY_LIMIT = 50;

// –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —á–∏—Å–ª–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
async function asyncPool<T, R>(poolLimit: number, array: T[], iteratorFn: (item: T, index: number) => Promise<R>): Promise<R[]> {
	const ret: Promise<R>[] = [];
	const executing: Promise<void>[] = [];

	for (let i = 0; i < array.length; i++) {
		const item = array[i];
		const p = Promise.resolve().then(() => iteratorFn(item, i));
		ret.push(p);

		if (poolLimit <= array.length) {
			const e = p.then(() => {
				executing.splice(executing.indexOf(e), 1);
			});
			executing.push(e);
			if (executing.length >= poolLimit) {
				await Promise.race(executing);
			}
		}
	}
	return Promise.all(ret);
}

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–ø–æ—Ä—Ç–∞
export const POST = withPermission(
	async (req, { user }) => {
		try {
			const unauthorizedCategories = new Set<string>();

			// –ü–æ–ª—É—á–∞–µ–º form-data: —Ñ–∞–π–ª –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
			const formData = await req.formData();
			const file = formData.get("file") as File;
			const columns = JSON.parse(formData.get("columns") as string);

			if (!file) {
				return NextResponse.json({ error: "–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω" }, { status: 400 });
			}

			// –ß–∏—Ç–∞–µ–º Excel-—Ñ–∞–π–ª
			const buffer = Buffer.from(await file.arrayBuffer());
			const workbook = read(buffer, { type: "buffer" });
			const sheet = workbook.Sheets[workbook.SheetNames[0]];
			const rows = utils.sheet_to_json(sheet, { header: 1, defval: "" }) as any[][];

			// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
			let created = 0;
			let updated = 0;
			let skipped = 0;

			// –ö—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫–∞–∂–¥—ã–π —Ä–∞–∑
			const categoryCache: Record<string, number | null> = {};

			// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
			const getCategoryId = async (categoryTitle: string): Promise<number | null> => {
				if (!categoryTitle) return null;
				if (categoryCache.hasOwnProperty(categoryTitle)) return categoryCache[categoryTitle];

				const category = await prisma.category.findFirst({
					where: { title: categoryTitle },
					select: { id: true },
				});

				if (category) {
					categoryCache[categoryTitle] = category.id;
					return category.id;
				}

				// üëá –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
				if (user.role === "superadmin") {
					const created = await prisma.category.create({
						data: { title: categoryTitle },
					});
					categoryCache[categoryTitle] = created.id;
					return created.id;
				} else {
					unauthorizedCategories.add(categoryTitle);
					categoryCache[categoryTitle] = null;
					return null;
				}
			};

			// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞)
			const processRow = async (row: any[]): Promise<{ created?: true; updated?: true; skipped?: true }> => {
				try {
					if (!row || row.every((cell) => cell === null || cell === undefined || cell === "")) {
						return { skipped: true };
					}

					// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
					const sku = row[columns.sku]?.toString().trim();
					const title = row[columns.title]?.toString().trim();
					const brand = row[columns.brand]?.toString().trim();
					const priceRaw = row[columns.price];

					if (!sku || !title || !priceRaw || !brand) {
						return { skipped: true };
					}

					const price = typeof priceRaw === "string" ? parseFloat(priceRaw.replace(",", ".")) : priceRaw;

					const categoryTitle = columns.category !== undefined && columns.category !== -1 ? row[columns.category]?.toString().trim() : null;
					const description = columns.description !== undefined && columns.description !== -1 ? row[columns.description]?.toString().trim() : null;

					const categoryId = categoryTitle ? await getCategoryId(categoryTitle) : null;

					// –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä
					if (categoryTitle && !categoryId) {
						console.warn(`–ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä "${title}" ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryTitle}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
						return { skipped: true };
					}

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU –∏ –±—Ä–µ–Ω–¥–æ–º
					const existing = await prisma.product.findFirst({
						where: { sku, brand },
					});

					if (existing) {
						// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
						await prisma.product.update({
							where: { id: existing.id },
							data: {
								title,
								price,
								categoryId,
								description: description || null,
							},
						});
						return { updated: true };
					} else {
						// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
						await prisma.product.create({
							data: {
								sku,
								title,
								brand,
								price,
								image: null,
								description: description || null,
								categoryId,
								departmentId: user.departmentId ?? null, // üëà –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å—Ç—å –æ—Ç–¥–µ–ª
							},
						});
						return { created: true };
					}
				} catch (err) {
					console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏:", err);
					return { skipped: true };
				}
			};

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —á–∞–Ω–∫–∞–º–∏
			const totalRows = rows.length;
			console.log(`–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${totalRows}`);

			for (let i = 1; i < totalRows; i += CHUNK_SIZE) {
				const chunk = rows.slice(i, i + CHUNK_SIZE);
				const results = await asyncPool(CONCURRENCY_LIMIT, chunk, async (row) => processRow(row));

				results.forEach((result) => {
					if (result.created) created++;
					if (result.updated) updated++;
					if (result.skipped) skipped++;
				});

				console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω —á–∞–Ω–∫ —Å—Ç—Ä–æ–∫ —Å ${i + 1} –ø–æ ${i + chunk.length}`);
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∏–º–ø–æ—Ä—Ç–∞
			await prisma.importLog.create({
				data: {
					userId: user.id,
					fileName: file.name,
					created,
					updated,
					message: unauthorizedCategories.size > 0 ? `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${[...unauthorizedCategories].join(", ")}` : null,
				},
			});

			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			return NextResponse.json({
				created,
				updated,
				skipped,
				missingCategories: [...unauthorizedCategories],
			});
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤:", error);
			return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
		}
	},
	"edit_products",
	["superadmin", "admin"]
);
