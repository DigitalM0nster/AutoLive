// src/app/api/products/public/route.ts

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

export async function GET(req: Request) {
	const startTime = Date.now();
	try {
		const { searchParams } = new URL(req.url);
		const page = parseInt(searchParams.get("page") || "1");
		const limit = parseInt(searchParams.get("limit") || "100");
		const search = searchParams.get("search") || "";
		const categoryId = searchParams.get("categoryId");

		// –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
		const where: any = {};

		// –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –±—Ä–µ–Ω–¥—É
		if (search) {
			where.OR = [
				{ title: { contains: search, mode: "insensitive" } },
				{ sku: { contains: search, mode: "insensitive" } },
				{ brand: { contains: search, mode: "insensitive" } },
				{ category: { title: { contains: search, mode: "insensitive" } } },
			];
		}

		// –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		if (categoryId) {
			where.categoryId = parseInt(categoryId);
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
		const [products, total] = await Promise.all([
			prisma.product.findMany({
				where,
				include: {
					category: {
						select: {
							id: true,
							title: true,
						},
					},
					department: {
						select: {
							id: true,
							name: true,
						},
					},
				},
				skip: (page - 1) * limit,
				take: limit,
				orderBy: {
					title: "asc",
				},
			}),
			prisma.product.count({ where }),
		]);

		// –£–¥–∞–ª—è–µ–º supplierPrice –∏–∑ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
		const sanitizedProducts = products.map((product) => {
			const { supplierPrice, ...rest } = product;
			return {
				...rest,
				categoryTitle: product.category?.title || null,
			};
		});

		const executionTime = Date.now() - startTime;
		console.log(`üìä API /products –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${executionTime}–º—Å`);

		return NextResponse.json({
			products: sanitizedProducts,
			pagination: {
				page,
				limit,
				total,
				totalPages: Math.ceil(total / limit),
			},
		});
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:", error);

		// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		if (error instanceof Error) {
			if (error.message.includes("connection pool") || error.message.includes("P1017")) {
				console.error("–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
				return NextResponse.json(
					{
						error: "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
					},
					{ status: 503 }
				); // 503 Service Unavailable
			}

			if (error.message.includes("timeout")) {
				console.error("–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
				return NextResponse.json(
					{
						error: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
					},
					{ status: 504 }
				); // 504 Gateway Timeout
			}
		}

		return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
	}
}
