// src/app/api/products/[productId]/route.ts

import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";
import { withPermission } from "@/middleware/permissionMiddleware";
import jwt from "jsonwebtoken";
import { FilterValueForLog, FilterValueFromRequest, FilterRequest } from "@/lib/types";

// ‚úÖ GET ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
export async function GET(req: NextRequest, context: { params: Promise<{ productId: string }> }) {
	const { productId } = await context.params;

	try {
		const id = parseInt(productId);
		if (isNaN(id)) {
			return NextResponse.json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID" }, { status: 400 });
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies
		const token = req.cookies.get("authToken")?.value;
		if (!token) {
			return NextResponse.json({ error: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" }, { status: 401 });
		}

		// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		let user: any;
		try {
			user = jwt.verify(token, process.env.JWT_SECRET!);
		} catch (e) {
			return NextResponse.json({ error: "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω" }, { status: 401 });
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
		const product = await prisma.product.findUnique({
			where: { id },
			include: {
				department: { select: { id: true, name: true } },
				category: { select: { id: true, title: true } },
				productFilterValues: {
					include: {
						filterValue: {
							include: {
								filter: { select: { id: true, title: true } },
							},
						},
					},
				},
			},
		});

		if (!product) {
			return NextResponse.json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
		if (user.role === "manager" && product.departmentId !== user.departmentId) {
			return NextResponse.json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞" }, { status: 403 });
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–¥–µ–ª–∞ —Ç–æ–≤–∞—Ä–∞
		let allowedCategories: { id: number; title: string }[] = [];
		if (product.departmentId) {
			const departmentCategories = await prisma.departmentCategory.findMany({
				where: { departmentId: product.departmentId },
				include: {
					category: { select: { id: true, title: true } },
				},
			});
			allowedCategories = departmentCategories.map((dc) => dc.category);
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
		const canChangeCategory = allowedCategories.length > 0;

		// –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
		let categoryFilters: any[] = [];
		if (product.categoryId) {
			const filters = await prisma.filter.findMany({
				where: { categoryId: product.categoryId },
				include: {
					values: { select: { id: true, value: true } },
				},
			});

			// –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
			categoryFilters = await Promise.all(
				filters.map(async (filter) => {
					const selectedValues = await prisma.productFilterValue.findMany({
						where: {
							productId: product.id,
							filterValue: {
								filterId: filter.id,
							},
						},
						include: {
							filterValue: { select: { id: true, value: true } },
						},
					});

					console.log("üîç API - Filter:", filter.id, filter.type, "Selected values:", selectedValues);

					return {
						...filter,
						selected_values: selectedValues.map((pfv) => pfv.filterValue),
					};
				})
			);
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
		const response = {
			...product,
			allowedCategories,
			canChangeCategory,
			filters: categoryFilters,
		};

		return NextResponse.json({ product: response });
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
		return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
	}
}

// ‚úÖ PATCH ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
export const PATCH = withPermission(
	async (req, { user, scope }) => {
		const url = new URL(req.url);
		const productId = parseInt(url.pathname.split("/").pop()!);

		if (isNaN(productId)) {
			return NextResponse.json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID" }, { status: 400 });
		}

		const formData = await req.formData();
		console.log("üîç API Debug - –ü–æ–ª—É—á–µ–Ω PATCH –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", productId);

		try {
			const existing = await prisma.product.findUnique({
				where: { id: productId },
				include: {
					department: { select: { id: true, name: true } },
					category: { select: { id: true, title: true } },
					productFilterValues: {
						include: {
							filterValue: {
								include: {
									filter: { select: { id: true, title: true } },
								},
							},
						},
					},
				},
			});

			if (!existing) {
				return NextResponse.json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
			}

			if (scope === "department" && existing.departmentId !== user.departmentId) {
				return NextResponse.json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞" }, { status: 403 });
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ - —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –æ—Ç–¥–µ–ª —Ç–æ–≤–∞—Ä–∞
			if (formData.get("departmentId") !== null) {
				if (user.role !== "superadmin") {
					return NextResponse.json({ error: "–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –æ—Ç–¥–µ–ª —Ç–æ–≤–∞—Ä–∞" }, { status: 403 });
				}
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
			if (formData.get("categoryId") !== null && !["admin", "superadmin"].includes(user.role)) {
				return NextResponse.json({ error: "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞" }, { status: 403 });
			}

			// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
			const supplierPriceValue = formData.get("supplierPrice");
			const priceValue = formData.get("price");
			if (supplierPriceValue !== null && priceValue !== null) {
				const supplierPrice = supplierPriceValue ? parseFloat(supplierPriceValue as string) : null;
				const sitePrice = parseFloat(priceValue as string);

				if (supplierPrice !== null && supplierPrice > sitePrice) {
					return NextResponse.json({ error: "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Ü–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ" }, { status: 400 });
				}
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
			const updateData: any = {};
			const titleValue = formData.get("title");
			if (titleValue !== null) updateData.title = String(titleValue).trim();

			const skuValue = formData.get("sku");
			if (skuValue !== null) updateData.sku = String(skuValue).trim();

			if (priceValue !== null) updateData.price = parseFloat(priceValue as string);

			if (supplierPriceValue !== null) updateData.supplierPrice = supplierPriceValue ? parseFloat(supplierPriceValue as string) : null;

			const brandValue = formData.get("brand");
			if (brandValue !== null) updateData.brand = String(brandValue).trim();

			const descriptionValue = formData.get("description");
			if (descriptionValue !== null) updateData.description = descriptionValue ? String(descriptionValue).trim() : null;

			const departmentIdValue = formData.get("departmentId");
			if (departmentIdValue !== null) {
				const depId = parseInt(departmentIdValue as string);
				if (!isNaN(depId)) updateData.departmentId = depId;
			}

			const categoryIdValue = formData.get("categoryId");
			if (categoryIdValue !== null) {
				const catId = parseInt(categoryIdValue as string);
				if (!isNaN(catId)) updateData.categoryId = catId;
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
			const deleteImage = formData.get("deleteImage");
			console.log("üîç API Debug - deleteImage:", deleteImage);
			if (deleteImage === "true") {
				updateData.image = null;
				console.log("‚úÖ API Debug - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º image = null");
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª—è–µ–º)
			const imageFile = formData.get("imageFile") as File;
			console.log("üîç API Debug - imageFile:", imageFile ? `File: ${imageFile.name}, size: ${imageFile.size}` : "null");
			if (imageFile && imageFile.size > 0 && deleteImage !== "true") {
				try {
					// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
					const { uploadFile, validateFile } = await import("@/lib/simpleFileUpload");

					// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
					const validation = validateFile(imageFile);
					if (!validation.isValid) {
						return NextResponse.json({ error: validation.error }, { status: 400 });
					}

					// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
					const uploadResult = await uploadFile(imageFile, {
						prefix: "product",
						entityId: productId,
					});

					console.log("‚úÖ API Debug - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", uploadResult.url);

					// –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î
					updateData.image = uploadResult.url;
				} catch (error) {
					console.error("‚ùå API Debug - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
					return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" }, { status: 500 });
				}
			}

			const updated = await prisma.product.update({
				where: { id: productId },
				data: updateData,
				include: {
					department: { select: { id: true, name: true } },
					category: { select: { id: true, title: true } },
					productFilterValues: {
						include: {
							filterValue: {
								include: {
									filter: { select: { id: true, title: true } },
								},
							},
						},
					},
				},
			});

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–æ–≤–∞—Ä–∞
			const filterValuesString = formData.get("filterValues");
			if (filterValuesString) {
				try {
					const filterValues = JSON.parse(filterValuesString as string);
					console.log("üîç API - Received filterValues:", filterValues);

					// –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ç–æ–≤–∞—Ä–∞
					await prisma.productFilterValue.deleteMany({
						where: { productId: productId },
					});

					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å—Ç—Ä
					for (const filter of filterValues) {
						console.log("üîç API - Processing filter:", filter);

						// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–µ
						const filterInfo = await prisma.filter.findUnique({
							where: { id: filter.filterId },
							select: { type: true },
						});

						console.log("üîç API - Filter info:", filterInfo);

						if (filterInfo?.type === "range") {
							// –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º rangeValue
							console.log("üîç API - Processing range filter:", filter.filterId, "rangeValue:", filter.rangeValue);
							if (filter.rangeValue !== undefined && filter.rangeValue !== null) {
								// –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —Ç–æ–≤–∞—Ä–∞
								const existingValue = await prisma.productFilterValue.findFirst({
									where: {
										productId,
										filterValue: {
											filterId: filter.filterId,
										},
									},
									include: {
										filterValue: true,
									},
								});

								console.log("üîç API - Existing value:", existingValue);

								if (existingValue) {
									// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
									console.log("üîç API - Updating existing value:", existingValue.filterValueId, "to:", filter.rangeValue.toString());
									await prisma.filterValue.update({
										where: { id: existingValue.filterValueId },
										data: { value: filter.rangeValue.toString() },
									});
								} else {
									// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
									console.log("üîç API - Creating new value for filter:", filter.filterId, "value:", filter.rangeValue.toString());
									const newFilterValue = await prisma.filterValue.create({
										data: {
											filterId: filter.filterId,
											value: filter.rangeValue.toString(),
										},
									});

									// –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ç–æ–≤–∞—Ä–æ–º
									await prisma.productFilterValue.create({
										data: {
											productId,
											filterValueId: newFilterValue.id,
										},
									});
									console.log("üîç API - Created and linked new value:", newFilterValue.id);
								}
							}
						} else if (filter.valueIds && filter.valueIds.length > 0) {
							// –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID
							const filterValueRecords = filter.valueIds.map((valueId: number) => ({
								productId,
								filterValueId: valueId,
							}));

							await prisma.productFilterValue.createMany({
								data: filterValueRecords,
							});
						}
					}
				} catch (error) {
					console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:", error);
					return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤" }, { status: 400 });
				}
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			const hasRealChanges =
				(updateData.title !== undefined && updateData.title !== existing.title) ||
				(updateData.sku !== undefined && updateData.sku !== existing.sku) ||
				(updateData.price !== undefined && updateData.price !== existing.price) ||
				(updateData.supplierPrice !== undefined && updateData.supplierPrice !== existing.supplierPrice) ||
				(updateData.brand !== undefined && updateData.brand !== existing.brand) ||
				(updateData.description !== undefined && updateData.description !== existing.description) ||
				(updateData.departmentId !== undefined && updateData.departmentId !== existing.departmentId) ||
				(updateData.categoryId !== undefined && updateData.categoryId !== existing.categoryId) ||
				(updateData.image !== undefined && updateData.image !== existing.image);

			console.log("üîç API Debug - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:");
			console.log("üîç API Debug - updateData.image:", updateData.image);
			console.log("üîç API Debug - existing.image:", existing.image);
			console.log("üîç API Debug - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", updateData.image !== undefined && updateData.image !== existing.image);
			console.log("üîç API Debug - hasRealChanges:", hasRealChanges);

			// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			if (hasRealChanges) {
				console.log("‚úÖ API Debug - –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞");
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
				const { logProductChange } = await import("@/lib/universalLogging");
				await logProductChange({
					entityId: updated.id,
					adminId: user.id,
					message: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
					beforeData: existing,
					afterData: updated,
				});
				console.log("‚úÖ API Debug - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
			} else {
				console.log("‚ÑπÔ∏è API Debug - –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è");
			}

			console.log("‚úÖ API Debug - –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", updated.id, "image:", updated.image);
			return NextResponse.json({ product: updated });
		} catch (error) {
			console.error("‚ùå API Debug - –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
			return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
		}
	},
	"edit_products",
	["admin", "superadmin"]
);

// ‚úÖ DELETE ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
export const DELETE = withPermission(
	async (req, { user, scope }) => {
		const url = new URL(req.url);
		const productId = parseInt(url.pathname.split("/").pop()!);

		if (isNaN(productId)) {
			return NextResponse.json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID" }, { status: 400 });
		}

		try {
			const existing = await prisma.product.findUnique({
				where: { id: productId },
				include: {
					department: { select: { id: true, name: true } },
					category: { select: { id: true, title: true } },
					productFilterValues: {
						include: {
							filterValue: {
								include: {
									filter: { select: { id: true, title: true } },
								},
							},
						},
					},
				},
			});

			if (!existing) {
				return NextResponse.json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
			}

			if (scope === "department" && existing.departmentId !== user.departmentId) {
				return NextResponse.json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞" }, { status: 403 });
			}

			// –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
			await prisma.productFilterValue.deleteMany({
				where: { productId: productId },
			});

			// –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
			await prisma.product.delete({
				where: { id: productId },
			});

			// –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
			const { logProductChange } = await import("@/lib/universalLogging");
			await logProductChange({
				entityId: productId,
				adminId: user.id,
				message: "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
				beforeData: existing,
				afterData: null,
			});

			return NextResponse.json({ success: true });
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
			return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
		}
	},
	"edit_products",
	["admin", "superadmin"]
);
