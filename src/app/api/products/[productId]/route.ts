// src/app/api/products/[productId]/get-product/route.ts

import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";

export async function GET(_req: Request, context: { params: { productId: string } }) {
	const { productId } = context.params;

	console.log("üîç –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID:", productId);

	try {
		const id = parseInt(productId);
		if (isNaN(id)) {
			return NextResponse.json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID" }, { status: 400 });
		}

		const product = await prisma.product.findUnique({
			where: { id },
			include: {
				category: {
					select: { id: true, title: true },
				},
				productFilterValues: {
					include: {
						filterValue: {
							include: {
								filter: true,
							},
						},
					},
				},
			},
		});

		if (!product) {
			return NextResponse.json({ error: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —É–¥–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
		const filtersMap: Record<number, { id: number, title: string, selected_values: { id: number, value: string }[] }> = {};

		for (const pfv of product.productFilterValues) {
			const filter = pfv.filterValue.filter;
			if (!filtersMap[filter.id]) {
				filtersMap[filter.id] = {
					id: filter.id,
					title: filter.title,
					selected_values: [],
				};
			}
			filtersMap[filter.id].selected_values.push({
				id: pfv.filterValue.id,
				value: pfv.filterValue.value,
			});
		}

		const structuredProduct = {
			id: product.id,
			title: product.title,
			price: product.price,
			image: product.image,
			category: product.category,
			filters: Object.values(filtersMap),
		};

		return NextResponse.json({ product: structuredProduct });
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
		return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
	}
}
