import { NextResponse } from "next/server";
import { getDatabaseConnection } from "@/app/lib/db";

const generateCode = () => Math.floor(1000 + Math.random() * 9000).toString();

export async function POST(req) {
	try {
		const { phone } = await req.json();
		console.log(`üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${phone}`);

		if (!phone) {
			console.log("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
			return NextResponse.json({ error: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω" }, { status: 400 });
		}

		const db = await getDatabaseConnection();

		// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É
		const [users] = await db.execute("SELECT id FROM users WHERE phone = ? LIMIT 1", [phone]);

		// ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –û–¢–ö–ê–ó–´–í–ê–ï–ú –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞
		if (users.length > 0) {
			console.log("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
			await db.end();
			return NextResponse.json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" }, { status: 400 });
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥
		const [lastCode] = await db.execute("SELECT expires_at FROM sms_codes WHERE phone = ? ORDER BY expires_at DESC LIMIT 1", [phone]);

		if (lastCode.length > 0) {
			const expiresAt = new Date(lastCode[0].expires_at);
			const now = new Date();
			const remainingTime = Math.max(0, Math.floor((expiresAt - now) / 1000));

			if (expiresAt > now) {
				console.log(`‚è≥ –ö–æ–¥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å ${remainingTime} —Å–µ–∫—É–Ω–¥`);
				await db.end();
				return NextResponse.json({ error: "–ö–æ–¥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", remainingTime }, { status: 429 });
			}
		}

		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
		await db.execute("DELETE FROM sms_codes WHERE phone = ?", [phone]);
		console.log("üóëÔ∏è –°—Ç–∞—Ä—ã–µ –∫–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã");

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
		const code = generateCode();
		const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // +5 –º–∏–Ω—É—Ç
		const expiresIn = Math.max(0, Math.floor((expiresAt - Date.now()) / 1000));

		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ –≤ –ë–î
		await db.execute("INSERT INTO sms_codes (user_id, phone, code, expires_at, used) VALUES (NULL, ?, ?, ?, 0)", [phone, code, expiresAt]);
		console.log(`‚úÖ –ö–æ–¥ ${code} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î`);

		await db.end();
		return NextResponse.json({ success: true, message: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", expiresIn });
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:", error);
		return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ" }, { status: 500 });
	}
}
