import { NextResponse } from "next/server";
import { getDatabaseConnection } from "@/app/lib/db";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

export async function POST(req) {
	try {
		const { phone, code } = await req.json();
		console.log("üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:", { phone, code });

		if (!phone || !code) {
			console.log("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç phone –∏–ª–∏ code");
			return NextResponse.json({ error: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–¥" }, { status: 400 });
		}

		const connection = await getDatabaseConnection();
		console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
		const [rows] = await connection.execute("SELECT id FROM sms_codes WHERE phone = ? AND code = ? AND expires_at > NOW() AND used = FALSE", [phone, code]);
		console.log("üìå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω:", rows);

		if (rows.length === 0) {
			console.log("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥");
			await connection.end();
			return NextResponse.json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥" }, { status: 400 });
		}

		// –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
		await connection.execute("UPDATE sms_codes SET used = TRUE WHERE id = ?", [rows[0].id]);
		console.log("‚úÖ –ö–æ–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π");

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		const [users] = await connection.execute("SELECT id FROM users WHERE phone = ? LIMIT 1", [phone]);
		console.log("üìå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", users);

		if (users.length > 0) {
			console.log("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
			await connection.end();
			return NextResponse.json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" }, { status: 400 });
		}

		// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å (–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
		const hashedPassword = await bcrypt.hash(code, 10);
		console.log("üîê –ó–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å–æ–∑–¥–∞–Ω");

		// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const [result] = await connection.execute("INSERT INTO users (phone, password, role) VALUES (?, ?, 'user')", [phone, hashedPassword]);
		console.log("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", result);

		const userId = result.insertId; // –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		console.log("üÜî ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

		// –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
		await connection.execute("DELETE FROM sms_codes WHERE phone = ?", [phone]);
		console.log("üóëÔ∏è –°—Ç–∞—Ä—ã–µ –∫–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã");

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JWT_SECRET
		if (!process.env.JWT_SECRET) {
			console.error("‚ùå –û—à–∏–±–∫–∞: JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env.local");
			await connection.end();
			return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ—Ç JWT_SECRET" }, { status: 500 });
		}

		// –°–æ–∑–¥–∞—ë–º JWT —Ç–æ–∫–µ–Ω
		const token = jwt.sign(
			{
				userId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–ø–µ—Ä—å ID –≤–º–µ—Å—Ç–æ phone
				phone,
				role: "user",
			},
			process.env.JWT_SECRET,
			{ expiresIn: "7d" }
		);
		console.log("üîë JWT-—Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω");

		await connection.end();
		return NextResponse.json({ token, userId, success: true });
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
		return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ" }, { status: 500 });
	}
}
