import { NextResponse } from "next/server";
import { getDatabaseConnection } from "@/app/lib/db";
import bcrypt from "bcrypt";

const generateCode = () => Math.floor(1000 + Math.random() * 9000).toString();

export async function POST(req) {
	try {
		const { phone } = await req.json();
		if (!phone) {
			return NextResponse.json({ error: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω" }, { status: 400 });
		}

		const db = await getDatabaseConnection();

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		const [users] = await db.execute("SELECT id FROM users WHERE phone = ?", [phone]);

		if (users.length === 0) {
			await db.end();
			return NextResponse.json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å
		const newPassword = generateCode();
		const hashedPassword = await bcrypt.hash(newPassword, 10);

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –ë–î
		await db.execute("UPDATE users SET password = ? WHERE phone = ?", [hashedPassword, phone]);

		console.log(`üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è ${phone}: ${newPassword}`); // –í –±—É–¥—É—â–µ–º —Ç—É—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS

		await db.end();
		return NextResponse.json({ success: true, message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω", newPassword });
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è:", error);
		return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ" }, { status: 500 });
	}
}
