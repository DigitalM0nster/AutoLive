import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";
import { withPermission } from "@/middleware/permissionMiddleware";

interface ExtendedRequestContext {
	user: any;
	scope: string;
}

export const GET = withPermission(
	async (req: NextRequest, { user }: ExtendedRequestContext) => {
		try {
			// –ü–æ–ª—É—á–∞–µ–º departmentId –∏–∑ URL
			const departmentId = Number(req.nextUrl.pathname.split("/")[3]); // /api/departments/[departmentId]/logs

			if (isNaN(departmentId)) {
				return NextResponse.json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ç–¥–µ–ª–∞" }, { status: 400 });
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞
			const targetDepartment = await prisma.department.findUnique({
				where: { id: departmentId },
				select: { id: true, name: true },
			});

			if (!targetDepartment) {
				return NextResponse.json({ error: "–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
			}

			const { searchParams } = new URL(req.url);
			const page = parseInt(searchParams.get("page") || "1", 10);
			const limit = parseInt(searchParams.get("limit") || "10", 10);
			const skip = (page - 1) * limit;

			// –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –æ—Ç–¥–µ–ª–æ–≤
			const where: any = {
				entityType: "department", // –¢–æ–ª—å–∫–æ –ª–æ–≥–∏ –æ—Ç–¥–µ–ª–æ–≤
			};

			// –§–∏–ª—å—Ç—Ä –ø–æ –¥–µ–π—Å—Ç–≤–∏—é
			const action = searchParams.get("action");
			if (action && action !== "all") {
				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–Ω–∞–ø—à–æ—Ç–∞—Ö
				// –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
			}

			// –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
			const startDate = searchParams.get("startDate");
			const endDate = searchParams.get("endDate");
			if (startDate || endDate) {
				where.createdAt = {};
				if (startDate) {
					where.createdAt.gte = new Date(startDate);
				}
				if (endDate) {
					where.createdAt.lte = new Date(endDate + "T23:59:59.999Z");
				}
			}

			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –æ—Ç–¥–µ–ª–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ChangeLog (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
			const logs = await prisma.changeLog.findMany({
				where,
				orderBy: {
					createdAt: "desc",
				},
			});

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–≥–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
			let formattedLogs = logs.map((log) => {
				// –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
				const snapshotBefore = log.snapshotBefore ? JSON.parse(log.snapshotBefore as string) : null;
				const snapshotAfter = log.snapshotAfter ? JSON.parse(log.snapshotAfter as string) : null;
				const adminSnapshot = log.adminSnapshot ? JSON.parse(log.adminSnapshot as string) : null;
				const actions = log.actions ? JSON.parse(log.actions as string) : [];

				// –ï—Å–ª–∏ actions –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
				let determinedActions: string[] = actions;
				if (!actions || actions.length === 0) {
					// –ï—Å–ª–∏ –µ—Å—Ç—å snapshotAfter, –Ω–æ –Ω–µ—Ç snapshotBefore - —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ
					if (snapshotAfter && !snapshotBefore) {
						determinedActions = ["create_department"];
					}
					// –ï—Å–ª–∏ –µ—Å—Ç—å snapshotBefore, –Ω–æ –Ω–µ—Ç snapshotAfter - —ç—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ
					else if (snapshotBefore && !snapshotAfter) {
						determinedActions = ["delete_department"];
					}
					// –ï—Å–ª–∏ –µ—Å—Ç—å –∏ snapshotBefore, –∏ snapshotAfter - —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
					else if (snapshotBefore && snapshotAfter) {
						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
						// –∏–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º snapshotBefore
						const isActuallyUpdate = JSON.stringify(snapshotBefore) !== JSON.stringify(snapshotAfter);
						if (isActuallyUpdate) {
							// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
							const updateActions: string[] = [];

							// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
							if (snapshotBefore.name !== snapshotAfter.name) {
								updateActions.push("change_name");
							}

							// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
							const beforeCategories = snapshotBefore.allowedCategories?.map((c: any) => c.category.id).sort() || [];
							const afterCategories = snapshotAfter.allowedCategories?.map((c: any) => c.category.id).sort() || [];
							if (JSON.stringify(beforeCategories) !== JSON.stringify(afterCategories)) {
								updateActions.push("change_categories");
							}

							// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
							const beforeUsers = snapshotBefore.users?.map((u: any) => u.id).sort() || [];
							const afterUsers = snapshotAfter.users?.map((u: any) => u.id).sort() || [];
							if (JSON.stringify(beforeUsers) !== JSON.stringify(afterUsers)) {
								// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã/—É–¥–∞–ª–µ–Ω—ã
								const addedUsers = afterUsers.filter((id: number) => !beforeUsers.includes(id));
								const removedUsers = beforeUsers.filter((id: number) => !afterUsers.includes(id));

								if (addedUsers.length > 0) {
									updateActions.push("add_employees");
								}
								if (removedUsers.length > 0) {
									updateActions.push("remove_employees");
								}
							}

							determinedActions = updateActions.length > 0 ? updateActions : ["update"];
						} else {
							// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ
							determinedActions = ["create_department"];
						}
					}
				} else {
					// –ï—Å–ª–∏ actions —É–∫–∞–∑–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
					determinedActions = actions;
				}

				// –õ–æ–≥–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
				console.log(`üîç –õ–æ–≥ ${log.id}: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è:`, determinedActions);

				return {
					id: log.id,
					createdAt: log.createdAt,
					actions: determinedActions, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
					message: log.message,
					admin: adminSnapshot
						? {
								id: adminSnapshot.id,
								first_name: adminSnapshot.first_name,
								last_name: adminSnapshot.last_name,
								middle_name: adminSnapshot.middle_name,
								phone: adminSnapshot.phone,
								role: adminSnapshot.role,
								department: adminSnapshot.department,
						  }
						: null,
					targetDepartment: snapshotAfter
						? {
								id: snapshotAfter.id,
								name: snapshotAfter.name,
								allowedCategories: snapshotAfter.allowedCategories,
								users: snapshotAfter.users,
						  }
						: snapshotBefore
						? {
								id: snapshotBefore.id,
								name: snapshotBefore.name,
								allowedCategories: snapshotBefore.allowedCategories,
								users: snapshotBefore.users,
						  }
						: null,
					snapshotBefore,
					snapshotAfter:
						snapshotAfter ||
						(snapshotBefore
							? {
									// –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º snapshotAfter —Å removedUsers
									id: snapshotBefore.id,
									name: snapshotBefore.name,
									allowedCategories: snapshotBefore.allowedCategories,
									users: [],
									removedUsers: snapshotBefore.users ? snapshotBefore.users.map((user: any) => ({ user })) : [],
							  }
							: null),
					adminSnapshot,
				};
			});

			// –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É (departmentId –∏–∑ URL)
			console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É: ${departmentId}`);
			console.log(`üìä –õ–æ–≥–æ–≤ –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É: ${formattedLogs.length}`);

			formattedLogs = formattedLogs.filter((log) => {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º targetDepartment (snapshotAfter –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤)
				if (log.targetDepartment && log.targetDepartment.id === departmentId) {
					console.log(`‚úÖ –õ–æ–≥ ${log.id}: –Ω–∞–π–¥–µ–Ω –≤ targetDepartment (ID: ${log.targetDepartment.id})`);
					return true;
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º snapshotBefore –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤
				if (log.snapshotBefore && log.snapshotBefore.id === departmentId) {
					console.log(`‚úÖ –õ–æ–≥ ${log.id}: –Ω–∞–π–¥–µ–Ω –≤ snapshotBefore (ID: ${log.snapshotBefore.id})`);
					return true;
				}

				console.log(`‚ùå –õ–æ–≥ ${log.id}: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ ${departmentId}`);
				console.log(`   targetDepartment:`, log.targetDepartment);
				console.log(`   snapshotBefore:`, log.snapshotBefore);
				return false;
			});

			console.log(`üìä –õ–æ–≥–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É: ${formattedLogs.length}`);

			// –ó–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–µ–π—Å—Ç–≤–∏—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
			if (action && action !== "all") {
				console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–µ–π—Å—Ç–≤–∏—é: ${action}`);
				console.log(`üìä –õ–æ–≥–æ–≤ –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é: ${formattedLogs.length}`);

				formattedLogs = formattedLogs.filter((log) => {
					// –ú–∞–ø–ø–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –∏ –±—ç–∫–µ–Ω–¥–æ–º
					let hasAction = false;

					if (action === "create") {
						// –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—â–µ–º –ª–æ–≥–∏ —Å –¥–µ–π—Å—Ç–≤–∏–µ–º create_department
						hasAction = log.actions.includes("create_department");
					} else if (action === "update") {
						// –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—â–µ–º –ª–æ–≥–∏ —Å –ª—é–±—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
						// –ù–û –ù–ï –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω–∏—è
						hasAction = log.actions.some((actionType) => ["add_employees", "remove_employees", "change_name", "change_categories"].includes(actionType));
					}

					if (!hasAction) {
						console.log(`‚ùå –õ–æ–≥ ${log.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ "${action}". –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:`, log.actions);
						console.log(`   snapshotBefore:`, !!log.snapshotBefore);
						console.log(`   snapshotAfter:`, !!log.snapshotAfter);
					}
					return hasAction;
				});

				console.log(`üìä –õ–æ–≥–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é: ${formattedLogs.length}`);
			}

			// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
			const adminSearch = searchParams.get("adminSearch");
			if (adminSearch && adminSearch.trim() !== "") {
				const searchTerm = adminSearch.trim().toLowerCase();
				formattedLogs = formattedLogs.filter((log) => {
					if (!log.admin) return false;

					// –ü–æ–∏—Å–∫ –ø–æ ID (–µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ)
					if (!isNaN(Number(searchTerm)) && log.admin.id === parseInt(searchTerm)) {
						return true;
					}

					// –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
					if (log.admin.phone && log.admin.phone.toLowerCase().includes(searchTerm)) {
						return true;
					}

					// –ü–æ–∏—Å–∫ –ø–æ –§–ò–û
					const adminName = `${log.admin.last_name || ""} ${log.admin.first_name || ""} ${log.admin.middle_name || ""}`.trim().toLowerCase();
					if (adminName.includes(searchTerm)) {
						return true;
					}

					return false;
				});
			}

			// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
			const total = formattedLogs.length;

			// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
			const paginatedLogs = formattedLogs.slice(skip, skip + limit);

			const totalPages = Math.ceil(total / limit);

			return NextResponse.json({
				data: paginatedLogs,
				total,
				totalPages,
				currentPage: page,
				targetDepartment: {
					id: targetDepartment.id,
					name: targetDepartment.name,
				},
			});
		} catch (err) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –æ—Ç–¥–µ–ª–∞:", err);
			return NextResponse.json(
				{
					error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –æ—Ç–¥–µ–ª–∞",
					details: err instanceof Error ? err.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
				},
				{ status: 500 }
			);
		}
	},
	"view_departments_logs", // ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –æ—Ç–¥–µ–ª–æ–≤
	["superadmin", "admin", "manager"]
);
