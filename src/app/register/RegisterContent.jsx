"use client";

import { useState, useEffect } from "react";
import styles from "./styles.module.scss";
import { useRouter } from "next/navigation";

export default function RegisterContent() {
	const router = useRouter();

	const [phone, setPhone] = useState("");
	const [formattedPhone, setFormattedPhone] = useState("");
	const [code, setCode] = useState(["", "", "", ""]);
	const [isCodeSent, setIsCodeSent] = useState(false);
	const [phoneError, setPhoneError] = useState("");
	const [codeError, setCodeError] = useState("");

	// –¢–ê–ô–ú–ï–†
	const [expiresIn, setExpiresIn] = useState(0);
	useEffect(() => {
		if (expiresIn > 0) {
			const interval = setInterval(() => {
				setExpiresIn((prev) => (prev > 0 ? prev - 1 : 0));
			}, 1000);
			return () => clearInterval(interval);
		}
	}, [expiresIn]);

	// –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –û–¢–ö–†–´–í–ê–¢–¨ –ü–†–ò –û–¢–ö–†–´–¢–ò–ò –°–¢–†–ê–ù–ò–¶–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
	useEffect(() => {
		const urlParams = new URLSearchParams(window.location.search);
		const urlPhone = urlParams.get("phone");
		const urlCode = urlParams.get("code");

		if (urlPhone && urlCode) {
			confirmRegistration(urlPhone, urlCode);
		} else {
			const savedPhone = localStorage.getItem("phone");
			const savedCodeSent = localStorage.getItem("isCodeSent");

			if (savedPhone && savedCodeSent) {
				setPhone(savedPhone);
				setFormattedPhone(savedPhone);

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–æ–¥
				fetch("/api/user/auth/register/check-code", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify({ phone: savedPhone }),
				})
					.then((res) => res.json())
					.then((data) => {
						if (data.success) {
							setIsCodeSent(true);
							setExpiresIn(data.expires_in);
						} else {
							// –ö–æ–¥ –∏—Å—Ç—ë–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
							resetRegistration();
						}
					})
					.catch((error) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:", error));
			}
		}
	}, []);

	// –£–ë–ò–†–ê–ï–ú –û–®–ò–ë–ö–£ –¢–ï–õ–ï–§–û–ù–ê –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –¢–ï–õ–ï–§–û–ù–ê
	useEffect(() => {
		setPhoneError("");
	}, [phone, formattedPhone]);

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å—Ç—ë–∫ –ª–∏ –∫–æ–¥
	const checkCodeStatus = async (phone) => {
		try {
			const response = await fetch("/api/user/auth/register/check-code", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ phone }),
			});
			const data = await response.json();

			if (data.success) {
				setExpiresIn(data.expires_in); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
			} else {
				resetRegistration(); // –ö–æ–¥ –∏—Å—Ç—ë–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—ë
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:", error);
		}
	};

	// –°–±—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	const resetRegistration = () => {
		localStorage.removeItem("phone");
		localStorage.removeItem("isCodeSent");
		setPhone("");
		setFormattedPhone("");
		setCode(["", "", "", ""]);
		setIsCodeSent(false);
		setPhoneError("");
		setCodeError("");
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
	const handlePhoneChange = (e) => {
		const input = e.target;
		let rawValue = e.target.value.replace(/\D/g, ""); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã

		// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é 7, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –µ—ë –≤—Ä—É—á–Ω—É—é
		if (rawValue.startsWith("7")) {
			rawValue = rawValue.slice(1);
		}

		// –û—Å—Ç–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ü–∏—Ñ—Ä
		rawValue = rawValue.slice(0, 10);

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –±—ã–ª –∫—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
		const cursorPos = input.selectionStart;
		const prevLength = formattedPhone.length;
		const isDeleting = e.nativeEvent.inputType === "deleteContentBackward";

		// –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å–∫—É —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏
		let mask = "+7 (___) ___-__-__".split("");
		let digitIndex = 0;
		for (let i = 0; i < mask.length; i++) {
			if (mask[i] === "_" && digitIndex < rawValue.length) {
				mask[i] = rawValue[digitIndex];
				digitIndex++;
			}
		}
		let newFormatted = mask.join("");

		// –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
		let newCursorPos = cursorPos;

		if (isDeleting) {
			// –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤–ª–µ–≤–æ, –ø–æ–∫–∞ –Ω–µ –Ω–∞—Ç–∫–Ω—ë–º—Å—è –Ω–∞ —Ü–∏—Ñ—Ä—É
			while (newCursorPos > 4 && !/\d/.test(newFormatted[newCursorPos - 1])) {
				newCursorPos--;
			}
		} else {
			// –ü—Ä–∏ –≤–≤–æ–¥–µ –∫—É—Ä—Å–æ—Ä —Å—Ç–∞–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Ü–∏—Ñ—Ä—ã
			newCursorPos = newFormatted.indexOf("_");
			if (newCursorPos === -1) {
				newCursorPos = newFormatted.length; // –ï—Å–ª–∏ –≤—Å–µ —Ü–∏—Ñ—Ä—ã –≤–≤–µ–¥–µ–Ω—ã, —Å—Ç–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
			}
		}

		// –ï—Å–ª–∏ –≤—Å–µ —Ü–∏—Ñ—Ä—ã —É–¥–∞–ª–µ–Ω—ã, –∫—É—Ä—Å–æ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ—Å–ª–µ "+7 "
		if (rawValue.length === 0) {
			newCursorPos = 4;
		}

		setPhone(rawValue);
		setFormattedPhone(newFormatted);

		// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
		setTimeout(() => {
			input.setSelectionRange(newCursorPos, newCursorPos);
		}, 0);
	};

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
	const sendCode = async () => {
		if (phone.length !== 10) {
			setPhoneError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
			return;
		}

		try {
			const response = await fetch("/api/user/auth/register/send-code", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ phone }),
			});
			const data = await response.json();
			console.log("üì© –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ send-code:", data); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞

			if (response.ok) {
				setIsCodeSent(true);
				setExpiresIn(data.expiresIn);
				localStorage.setItem("phone", phone);
				localStorage.setItem("isCodeSent", "true");

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
				setPhoneError("");
			} else {
				setPhoneError(data.error);
				if (data.remainingTime) {
					setIsCodeSent(true);
				}
			}
		} catch (error) {
			setPhoneError("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
		}
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
	const handleCodeChange = (index, event) => {
		const value = event.target.value.replace(/\D/g, ""); // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
		setCodeError("");

		if (value) {
			const newCode = [...code];
			newCode[index] = value.slice(-1); // –í—Å–µ–≥–¥–∞ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–∏—Ñ—Ä—É –Ω–∞ –Ω–æ–≤—É—é
			setCode(newCode);

			// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–ø—É—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
			if (index < code.length - 1) {
				setTimeout(() => document.getElementById(`code-input-${index + 1}`).focus(), 0);
			}
		} else {
			// –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º —Ü–∏—Ñ—Ä—É, —Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
			const newCode = [...code];
			newCode[index] = "";
			setCode(newCode);

			// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–ø—É—Ç, –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º –∏ –Ω–µ –≤ –ø–µ—Ä–≤–æ–º –∏–Ω–ø—É—Ç–µ
			if (index > 0) {
				setTimeout(() => document.getElementById(`code-input-${index - 1}`).focus(), 0);
			}
		}
	};

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	const confirmRegistration = async () => {
		const inputPhone = String(phone); // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
		const inputCode = code.join(""); // –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–∑ 4 —Ü–∏—Ñ—Ä

		if (inputCode.length !== 4) {
			setCodeError("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–¥");
			return;
		}

		try {
			console.log("üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", { phone: inputPhone, code: inputCode });

			const response = await fetch("/api/user/auth/register", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ phone: inputPhone, code: inputCode }), // üõ† –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
			});

			const data = await response.json();
			console.log("üì© –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ confirm-registration:", data);

			if (response.ok) {
				localStorage.removeItem("phone");
				localStorage.removeItem("isCodeSent");
				alert("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
				router.push("/"); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
			} else {
				setCodeError(data.error || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
			}
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ confirmRegistration:", error);
			setCodeError("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
		}
	};

	return (
		<div className={styles.registerContentBlock}>
			{!isCodeSent ? (
				<div className={styles.inputBlock}>
					<div className={styles.inputName}>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω</div>
					<div className={styles.inputPhone}>
						<input type="tel" value={formattedPhone} onChange={handlePhoneChange} placeholder="+7 (___) ___-__-__" />
					</div>
					<div className={`button ${styles.button}`} onClick={sendCode}>
						{isCodeSent ? "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–¥" : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥"}
					</div>

					{phoneError && <div className={styles.error}>{phoneError}</div>}
				</div>
			) : (
				<div className={styles.inputBlock}>
					<div className={styles.inputName}>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥</div>

					<div className={styles.inputCode}>
						{code.map((digit, index) => (
							<input
								key={index}
								id={`code-input-${index}`}
								type="text"
								pattern="[0-9]*"
								inputMode="numeric"
								value={digit}
								onChange={(e) => handleCodeChange(index, e)}
								maxLength="1"
							/>
						))}
					</div>
					{expiresIn > 0 && <div className={styles.timer}>–ö–æ–¥ –∏—Å—Ç–µ—á—ë—Ç —á–µ—Ä–µ–∑ {expiresIn} —Å–µ–∫.</div>}

					<div className={`button ${styles.button}`} onClick={confirmRegistration}>
						–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
					</div>
					<div
						className={styles.backButton}
						onClick={() => {
							setIsCodeSent(false);
						}}
					>
						‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
					</div>
					{codeError && <div className={styles.error}>{codeError}</div>}
				</div>
			)}
		</div>
	);
}
