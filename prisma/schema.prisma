// prisma/schema.prisma

// ------------------------------
// üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–æ–ª–∏
// ------------------------------
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id         Int        @id @default(autoincrement())
    first_name String
    last_name  String
    phone      String     @unique
    password   String
    role       Role
    status     UserStatus @default(unverified)
    createdAt  DateTime   @default(now())

    // üëá –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∞–¥–º–∏–Ω—É
    adminId  Int?
    admin    User?  @relation("AdminManagers", fields: [adminId], references: [id])
    managers User[] @relation("AdminManagers")

    // üëá –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º–µ–µ—Ç –∑–∞–∫–∞–∑—ã
    managerOrders Order[] @relation("ManagerOrders")
    clientOrders  Order[] @relation("ClientOrders")
}

enum Role {
    superadmin
    admin
    manager
    client
}

enum UserStatus {
    unverified
    verified
}

// ------------------------------
// üì¶ –¢–æ–≤–∞—Ä—ã –∏ —Ä–∞–∑–¥–µ–ª—ã
// ------------------------------

model Category {
    id          Int      @id @default(autoincrement())
    title       String
    slug        String   @unique
    description String?
    image       String?
    createdAt   DateTime @default(now())

    products Product[] // üëà —Ç–æ–≤–∞—Ä—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —Ä–∞–∑–¥–µ–ª—É
    Filter   Filter[]
}

model Product {
    id          Int      @id @default(autoincrement())
    title       String
    sku         String   @unique
    price       Float
    description String?
    image       String?
    createdAt   DateTime @default(now())

    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])

    productFilterValues ProductFilterValue[]

    analogsFrom     ProductAnalog[]  @relation("ProductToAnalog") // üëà —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä ‚Äî –æ—Ä–∏–≥–∏–Ω–∞–ª
    analogsTo       ProductAnalog[]  @relation("AnalogToProduct") // üëà —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä ‚Äî –∞–Ω–∞–ª–æ–≥
    OrderItem       OrderItem[]
    serviceKitItems ServiceKitItem[] @relation("KitItemProduct")
    analogInKits    ServiceKitItem[] @relation("KitItemAnalog")
}

// ------------------------------
// üß© –§–∏–ª—å—Ç—Ä—ã
// ------------------------------
model Filter {
    id         Int           @id @default(autoincrement())
    title      String
    type       FilterType    @default(select)
    categoryId Int
    category   Category      @relation(fields: [categoryId], references: [id])
    values     FilterValue[]
}

enum FilterType {
    select
    multi
    range
    boolean
}

model FilterValue {
    id       Int    @id @default(autoincrement())
    value    String
    filterId Int
    filter   Filter @relation(fields: [filterId], references: [id])

    productFilterValues ProductFilterValue[] // üëà —Å–≤—è–∑—å —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –º–æ–¥–µ–ª—å
}

model ProductFilterValue {
    id            Int @id @default(autoincrement())
    productId     Int
    filterValueId Int

    product     Product     @relation(fields: [productId], references: [id])
    filterValue FilterValue @relation(fields: [filterValueId], references: [id])

    @@unique([productId, filterValueId]) // üëà –∑–∞–ø—Ä–µ—Ç –Ω–∞ –¥—É–±–ª–∏
}

// ------------------------------
// üîÑ –ê–Ω–∞–ª–æ–≥–∏
// ------------------------------
model ProductAnalog {
    id        Int @id @default(autoincrement())
    productId Int
    analogId  Int

    product Product @relation("ProductToAnalog", fields: [productId], references: [id])
    analog  Product @relation("AnalogToProduct", fields: [analogId], references: [id])

    @@unique([productId, analogId])
}

// ------------------------------
// üõ† –ö–æ–º–ø–ª–µ–∫—Ç—ã –¢–û
// ------------------------------
model ServiceKit {
    id          Int      @id @default(autoincrement())
    title       String
    description String?
    image       String?
    price       Float
    createdAt   DateTime @default(now())

    kitItems ServiceKitItem[]
}

model ServiceKitItem {
    id              Int  @id @default(autoincrement())
    kitId           Int
    productId       Int
    analogProductId Int?

    kit           ServiceKit @relation(fields: [kitId], references: [id])
    product       Product    @relation("KitItemProduct", fields: [productId], references: [id])
    analogProduct Product?   @relation("KitItemAnalog", fields: [analogProductId], references: [id])
}

// ------------------------------
// üìë –ó–∞–∫–∞–∑—ã
// ------------------------------
model Order {
    id          Int         @id @default(autoincrement())
    title       String
    description String?
    status      OrderStatus @default(pending)
    createdAt   DateTime    @default(now())

    managerId Int
    manager   User @relation("ManagerOrders", fields: [managerId], references: [id])

    clientId Int
    client   User @relation("ClientOrders", fields: [clientId], references: [id])

    orderItems OrderItem[]
}

model OrderItem {
    id        Int @id @default(autoincrement())
    orderId   Int
    productId Int
    quantity  Int @default(1)

    order   Order   @relation(fields: [orderId], references: [id])
    product Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
    pending
    confirmed
    shipped
    delivered
    cancelled
}
