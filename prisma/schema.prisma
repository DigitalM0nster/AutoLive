// prisma\schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// ------------------------------
// üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–æ–ª–∏
// ------------------------------
model User {
    id         Int        @id @default(autoincrement()) @map("id")
    phone      String     @unique @map("phone")
    password   String     @map("password")
    first_name String?    @map("first_name")
    last_name  String?    @map("last_name")
    avatar     String?
    role       Role       @map("role")
    status     UserStatus @default(unverified) @map("status")
    createdAt  DateTime   @default(now()) @map("created_at")

    departmentId Int?        @map("department_id")
    department   Department? @relation("DepartmentUsers", fields: [departmentId], references: [id])

    managerOrders Order[] @relation("ManagerOrders")
    clientOrders  Order[] @relation("ClientOrders")

    importLogs ImportLog[]

    @@map("user")
}

enum Role {
    superadmin
    admin
    manager
    client
}

enum UserStatus {
    unverified
    verified
}

// ------------------------------
// –°–ú–° SMS
// ------------------------------
model SmsCode {
    id        Int      @id @default(autoincrement())
    phone     String
    code      String
    expiresAt DateTime
    used      Boolean  @default(false)
    createdAt DateTime @default(now())
}

// ------------------------------
// üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
// ------------------------------
model Category {
    id        Int      @id @default(autoincrement()) @map("id")
    title     String   @unique @map("title")
    image     String?  @map("image")
    createdAt DateTime @default(now()) @map("created_at")

    products Product[]
    Filter   Filter[]

    order              Int                  @default(0) @map("order")
    markupRules        MarkupRule[]
    allowedDepartments DepartmentCategory[]

    @@map("category")
}

model Product {
    id            Int      @id @default(autoincrement()) @map("id")
    title         String   @map("title")
    sku           String   @map("sku")
    brand         String   @default("UNKNOWN") @map("brand")
    price         Float    @map("price")
    supplierPrice Float?   @map("supplier_price")
    description   String?  @map("description")
    image         String?  @map("image")
    createdAt     DateTime @default(now()) @map("created_at")
    updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

    categoryId   Int?        @map("category_id")
    category     Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    departmentId Int?        @map("department_id")
    department   Department? @relation(fields: [departmentId], references: [id])

    productFilterValues ProductFilterValue[]
    analogsFrom         ProductAnalog[]      @relation("ProductToAnalog")
    analogsTo           ProductAnalog[]      @relation("AnalogToProduct")
    serviceKitItems     ServiceKitItem[]     @relation("KitItemProduct")
    analogInKits        ServiceKitItem[]     @relation("KitItemAnalog")

    @@index([title])
    @@index([sku])
    @@index([brand])
    @@map("product")
}

// ------------------------------
// üß© –§–∏–ª—å—Ç—Ä—ã
// ------------------------------
model Filter {
    id         Int           @id @default(autoincrement()) @map("id")
    title      String        @map("title")
    type       FilterType    @default(select) @map("type")
    categoryId Int           @map("category_id")
    category   Category      @relation(fields: [categoryId], references: [id])
    values     FilterValue[]

    @@map("filter")
}

enum FilterType {
    select
    multi
    range
    boolean
}

model FilterValue {
    id       Int    @id @default(autoincrement()) @map("id")
    value    String @map("value")
    filterId Int    @map("filter_id")
    filter   Filter @relation(fields: [filterId], references: [id])

    productFilterValues ProductFilterValue[]

    @@map("filter_value")
}

model ProductFilterValue {
    id            Int @id @default(autoincrement()) @map("id")
    productId     Int @map("product_id")
    filterValueId Int @map("filter_value_id")

    product     Product     @relation(fields: [productId], references: [id])
    filterValue FilterValue @relation(fields: [filterValueId], references: [id])

    @@unique([productId, filterValueId])
    @@map("product_filter_value")
}

// ------------------------------
// üîÑ –ê–Ω–∞–ª–æ–≥–∏
// ------------------------------
model ProductAnalog {
    id        Int @id @default(autoincrement()) @map("id")
    productId Int @map("product_id")
    analogId  Int @map("analog_id")

    product Product @relation("ProductToAnalog", fields: [productId], references: [id])
    analog  Product @relation("AnalogToProduct", fields: [analogId], references: [id])

    @@unique([productId, analogId])
    @@map("product_analog")
}

// ------------------------------
// üõ† –ö–æ–º–ø–ª–µ–∫—Ç—ã –¢–û
// ------------------------------
model ServiceKit {
    id          Int      @id @default(autoincrement()) @map("id")
    title       String   @map("title")
    description String?  @map("description")
    image       String?  @map("image")
    price       Float    @map("price")
    createdAt   DateTime @default(now()) @map("created_at")

    kitItems ServiceKitItem[]

    @@map("service_kit")
}

model ServiceKitItem {
    id              Int  @id @default(autoincrement()) @map("id")
    kitId           Int  @map("kit_id")
    productId       Int  @map("product_id")
    analogProductId Int? @map("analog_product_id")

    kit           ServiceKit @relation(fields: [kitId], references: [id])
    product       Product    @relation("KitItemProduct", fields: [productId], references: [id], onDelete: Cascade)
    analogProduct Product?   @relation("KitItemAnalog", fields: [analogProductId], references: [id], onDelete: SetNull)
}

// ------------------------------
// üìë –ó–∞–∫–∞–∑—ã
// ------------------------------
model Order {
    id          Int         @id @default(autoincrement()) @map("id")
    title       String      @map("title")
    description String?     @map("description")
    status      OrderStatus @default(pending) @map("status")
    createdAt   DateTime    @default(now()) @map("created_at")

    managerId    Int         @map("manager_id")
    manager      User        @relation("ManagerOrders", fields: [managerId], references: [id])
    departmentId Int?        @map("department_id")
    department   Department? @relation(fields: [departmentId], references: [id])

    clientId Int  @map("client_id")
    client   User @relation("ClientOrders", fields: [clientId], references: [id])

    orderItems OrderItem[]

    @@map("order")
}

model OrderItem {
    id      Int @id @default(autoincrement()) @map("id")
    orderId Int @map("order_id")

    // –°–Ω–∏–º–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞:
    sku      String  @map("product_sku")
    title    String  @map("product_title")
    price    Float   @map("product_price")
    brand    String  @map("product_brand")
    image    String? @map("product_image")
    quantity Int     @default(1) @map("quantity")

    order Order @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
    pending
    confirmed
    shipped
    delivered
    cancelled
}

// ------------------------------
// üéÅ –ê–∫—Ü–∏–∏
// ------------------------------
model Promotion {
    id          Int      @id @default(autoincrement()) @map("id")
    image       String   @map("image")
    title       String   @map("title")
    description String?  @map("description")
    buttonText  String?  @map("button_text")
    buttonLink  String?  @map("button_link")
    createdAt   DateTime @default(now()) @map("created_at")

    order Int @default(0) @map("order")

    @@map("promotion")
}

// ------------------------------
// –ë–ê–ó–ê
// ------------------------------
model Supplier {
    id        Int           @id @default(autoincrement())
    name      String
    formats   PriceFormat[]
    createdAt DateTime      @default(now())
}

model PriceFormat {
    id         Int      @id @default(autoincrement())
    supplierId Int
    supplier   Supplier @relation(fields: [supplierId], references: [id])
    columns    Json
    createdAt  DateTime @default(now())
}

// ------------------------------
// –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
// ------------------------------

model ImportLog {
    id        Int      @id @default(autoincrement())
    fileName  String
    created   Int
    updated   Int
    createdAt DateTime @default(now())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    message   String?
}

// ------------------------------
// üè¢ –û—Ç–¥–µ–ª—ã
// ------------------------------
model Department {
    id        Int      @id @default(autoincrement()) @map("id")
    name      String   @map("name")
    createdAt DateTime @default(now()) @map("created_at")

    users             User[]               @relation("DepartmentUsers")
    products          Product[]
    orders            Order[]
    markupRules       MarkupRule[]
    allowedCategories DepartmentCategory[]

    @@map("department")
}

model DepartmentCategory {
    id           Int @id @default(autoincrement())
    departmentId Int
    categoryId   Int

    department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@unique([departmentId, categoryId])
}

// ------------------------------
// –ù–ê–¶–ï–ù–ö–ê
// ------------------------------
model MarkupRule {
    id           Int      @id @default(autoincrement()) @map("id")
    departmentId Int?     @map("department_id")
    categoryId   Int?     @map("category_id")
    brand        String?  @map("brand")
    priceFrom    Float    @default(0) @map("price_from") // –æ—Ç –∫–∞–∫–æ–π —Ü–µ–Ω—ã
    priceTo      Float?   @map("price_to") // –¥–æ –∫–∞–∫–æ–π —Ü–µ–Ω—ã (nullable = ‚àû)
    markup       Float    @default(1.0) @map("markup") // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä 1.5 = +50%
    createdAt    DateTime @default(now()) @map("created_at")

    department Department? @relation(fields: [departmentId], references: [id])
    category   Category?   @relation(fields: [categoryId], references: [id])

    @@map("markup_rule")
}
