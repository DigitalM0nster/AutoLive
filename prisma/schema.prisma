generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

model User {
    id           Int        @id @default(autoincrement()) @map("id")
    phone        String     @unique(map: "user_phone_unique") @map("phone") @db.VarChar(255)
    password     String     @map("password") @db.VarChar(255)
    first_name   String?    @map("first_name") @db.VarChar(255)
    last_name    String?    @map("last_name") @db.VarChar(255)
    middle_name  String?    @map("middle_name") @db.VarChar(255)
    role         Role       @map("role")
    status       UserStatus @default(unverified) @map("status")
    createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
    departmentId Int?       @map("department_id")

    // –°–≤—è–∑–∏
    department    Department? @relation("DepartmentUsers", fields: [departmentId], references: [id])
    managerOrders Order[]     @relation("ManagerOrders")
    clientOrders  Order[]     @relation("ClientOrders")
    createdOrders Order[]     @relation("CreatedOrders")

    @@map("user")
}

model Category {
    id        Int      @id @default(autoincrement()) @map("id")
    title     String   @unique(map: "category_title_unique") @map("title") @db.VarChar(255)
    image     String?  @map("image") @db.VarChar(255)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
    order     Int      @default(0) @map("order")

    // –°–≤—è–∑–∏
    products           Product[]
    Filter             Filter[]
    markupRules        MarkupRule[]
    allowedDepartments DepartmentCategory[]

    @@map("category")
}

model Product {
    id            Int      @id @default(autoincrement()) @map("id")
    title         String   @map("title") @db.VarChar(255)
    sku           String   @map("sku") @db.VarChar(255)
    brand         String   @default("UNKNOWN") @map("brand") @db.VarChar(255)
    price         Float    @map("price")
    supplierPrice Float?   @map("supplier_price")
    description   String?  @map("description") @db.Text
    image         String?  @map("image") @db.VarChar(255)
    createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(0)
    updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
    categoryId    Int?     @map("category_id")
    departmentId  Int      @map("department_id")

    // –°–≤—è–∑–∏
    category            Category?            @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    department          Department           @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    productFilterValues ProductFilterValue[]
    analogsFrom         ProductAnalog[]      @relation("ProductToAnalog")
    analogsTo           ProductAnalog[]      @relation("AnalogToProduct")
    serviceKitItems     ServiceKitItem[]     @relation("KitItemProduct")
    analogInKits        ServiceKitItem[]     @relation("KitItemAnalog")

    @@index([title])
    @@index([sku])
    @@index([brand])
    @@map("product")
}

model Filter {
    id         Int        @id @default(autoincrement()) @map("id")
    title      String     @map("title") @db.VarChar(255)
    type       FilterType @default(select) @map("type")
    categoryId Int        @map("category_id")

    // –°–≤—è–∑–∏
    category Category      @relation(fields: [categoryId], references: [id])
    values   FilterValue[]

    @@map("filter")
}

model FilterValue {
    id       Int    @id @default(autoincrement()) @map("id")
    value    String @map("value") @db.VarChar(255)
    filterId Int    @map("filter_id")

    // –°–≤—è–∑–∏
    filter              Filter               @relation(fields: [filterId], references: [id])
    productFilterValues ProductFilterValue[]

    @@map("filter_value")
}

model ProductFilterValue {
    id            Int @id @default(autoincrement()) @map("id")
    productId     Int @map("product_id")
    filterValueId Int @map("filter_value_id")

    // –°–≤—è–∑–∏
    product     Product     @relation(fields: [productId], references: [id])
    filterValue FilterValue @relation(fields: [filterValueId], references: [id])

    @@unique([productId, filterValueId], map: "product_filter_value_product_id_filter_value_id_unique")
    @@map("product_filter_value")
}

model ProductAnalog {
    id        Int @id @default(autoincrement()) @map("id")
    productId Int @map("product_id")
    analogId  Int @map("analog_id")

    // –°–≤—è–∑–∏
    product Product @relation("ProductToAnalog", fields: [productId], references: [id])
    analog  Product @relation("AnalogToProduct", fields: [analogId], references: [id])

    @@unique([productId, analogId], map: "product_analog_product_id_analog_id_unique")
    @@map("product_analog")
}

model ServiceKit {
    id          Int      @id @default(autoincrement()) @map("id")
    title       String   @map("title") @db.VarChar(255)
    description String?  @map("description") @db.Text
    image       String?  @map("image") @db.VarChar(255)
    price       Float    @map("price")
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)

    // –°–≤—è–∑–∏
    kitItems ServiceKitItem[]

    @@map("service_kit")
}

model Order {
    id           Int         @id @default(autoincrement()) @map("id")
    title        String      @map("title") @db.VarChar(255)
    description  String?     @map("description") @db.Text
    status       OrderStatus @default(created) @map("status")
    createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
    updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
    assignedAt   DateTime?   @map("assigned_at") @db.Timestamp(0) // –ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—ã–ª –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É
    managerId    Int?        @map("manager_id") // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ - –º–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    departmentId Int?        @map("department_id") // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ - –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç –±—ã—Ç—å null
    clientId     Int?        @map("client_id") // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ - –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å null
    createdBy    Int         @map("created_by") // –ö—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞–∫–∞–∑ (–∞–¥–º–∏–Ω/–º–µ–Ω–µ–¥–∂–µ—Ä/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)

    // –°–≤—è–∑–∏
    manager    User?       @relation("ManagerOrders", fields: [managerId], references: [id])
    department Department? @relation(fields: [departmentId], references: [id])
    client     User?       @relation("ClientOrders", fields: [clientId], references: [id])
    creator    User        @relation("CreatedOrders", fields: [createdBy], references: [id])
    orderItems OrderItem[]
    orderLogs  OrderLog[]

    @@map("order")
}

model OrderItem {
    id            Int     @id @default(autoincrement()) @map("id")
    orderId       Int     @map("order_id")
    product_sku   String  @db.VarChar(255)
    product_title String  @db.VarChar(255)
    product_price Float
    product_brand String  @db.VarChar(255)
    product_image String? @db.VarChar(255)
    quantity      Int     @default(1)

    // –°–≤—è–∑–∏
    order Order @relation(fields: [orderId], references: [id])

    @@map("order_item")
}

model Department {
    id        Int      @id @default(autoincrement()) @map("id")
    name      String   @map("name") @db.VarChar(255)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

    // –°–≤—è–∑–∏
    users             User[]               @relation("DepartmentUsers")
    products          Product[]
    orders            Order[]
    markupRules       MarkupRule[]
    allowedCategories DepartmentCategory[]

    @@map("department")
}

model DepartmentCategory {
    id           Int @id @default(autoincrement())
    departmentId Int @map("department_id")
    categoryId   Int @map("category_id")

    // –°–≤—è–∑–∏
    department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@unique([departmentId, categoryId], map: "department_category_department_id_category_id_unique")
    @@map("department_category")
}

model MarkupRule {
    id           Int      @id @default(autoincrement()) @map("id")
    departmentId Int?     @map("department_id")
    categoryId   Int?     @map("category_id")
    brand        String?  @map("brand") @db.VarChar(255)
    priceFrom    Float    @default(0) @map("price_from")
    priceTo      Float?   @map("price_to")
    markup       Float    @default(1) @map("markup")
    createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)

    // –°–≤—è–∑–∏
    department Department? @relation(fields: [departmentId], references: [id])
    category   Category?   @relation(fields: [categoryId], references: [id])

    @@map("markup_rule")
}

model ServiceKitItem {
    id                Int  @id @default(autoincrement()) @map("id")
    kit_id            Int  @map("kit_id")
    product_id        Int  @map("product_id")
    analog_product_id Int? @map("analog_product_id")

    // –°–≤—è–∑–∏
    kit           ServiceKit @relation(fields: [kit_id], references: [id])
    product       Product    @relation("KitItemProduct", fields: [product_id], references: [id], onDelete: Cascade)
    analogProduct Product?   @relation("KitItemAnalog", fields: [analog_product_id], references: [id], onDelete: SetNull)

    @@map("service_kit_item")
}

model bulk_action_log {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now()) @db.Timestamp(0)
    action     String   @db.VarChar(255)
    message    String?  @db.Text
    count      Int

    // üì∏ –°–Ω–∏–º–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è ID)
    user_snapshot        Json? // –°–æ–¥–µ—Ä–∂–∏—Ç {id, first_name, last_name, role, department}
    departments_snapshot Json? // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ [{id, name}, ...]
    products_snapshot    Json? // –ú–∞—Å—Å–∏–≤ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

    // üì¶ –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    user_id       Int? // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    department_id Int? // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    snapshots     String // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
}

model department_log {
    id              Int      @id @default(autoincrement())
    created_at      DateTime @default(now()) @db.Timestamp(0)
    actions         String   @db.Text
    message         String?  @db.Text
    user_id         Int?
    department_id   Int
    snapshot_before String?  @db.Text
    snapshot_after  String?  @db.Text
    admin_snapshot  String?  @db.Text

    // üÜï –ù–æ–≤—ã–µ Json –ø–æ–ª—è –¥–ª—è —Å–Ω–∏–º–∫–æ–≤
    user_snapshot       Json?
    department_snapshot Json?
}

model import_log {
    id            Int      @id @default(autoincrement())
    fileName      String   @map("file_name") @db.VarChar(255)
    created       Int
    updated       Int
    skipped       Int      @default(0)
    imagePolicy   String?  @map("image_policy") @db.VarChar(255)
    markupSummary String?  @map("markup_summary") @db.VarChar(255)
    markupData    Json?    @map("markup_data") // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Ü–µ–Ω–∫–∞—Ö
    createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(0)
    message       String?  @db.Text
    count         Int

    // üì∏ –°–Ω–∏–º–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è ID)
    userSnapshot       Json? @map("user_snapshot") // –°–æ–¥–µ—Ä–∂–∏—Ç {id, first_name, last_name, role, department}
    departmentSnapshot Json? @map("department_snapshot") // –°–æ–¥–µ—Ä–∂–∏—Ç {id, name, created_at}
    productsSnapshot   Json? @map("products_snapshot") // –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞

    // üì¶ –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    userId         Int?    @map("user_id") // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    departmentId   Int?    @map("department_id") // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    snapshots      String? // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    snapshotBefore String? @map("snapshot_before") // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    snapshotAfter  String? @map("snapshot_after") // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
}

model price_format {
    id          Int      @id @default(autoincrement())
    supplier_id Int
    columns     String
    created_at  DateTime @default(now()) @db.Timestamp(0)
}

model product_log {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
    action    String   @db.VarChar(255)
    message   String?  @db.Text

    // üì∏ –°–Ω–∏–º–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è ID)
    userSnapshot       Json? @map("user_snapshot") // –°–æ–¥–µ—Ä–∂–∏—Ç {id, first_name, last_name, role, department}
    departmentSnapshot Json? @map("department_snapshot") // –°–æ–¥–µ—Ä–∂–∏—Ç {id, name}
    productSnapshot    Json? @map("product_snapshot") // –°–æ–¥–µ—Ä–∂–∏—Ç {id, title, price, sku, brand}

    // üì¶ –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    userId         Int?    @map("user_id") // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    departmentId   Int?    @map("department_id") // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    productId      Int?    @map("product_id") // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    snapshotBefore String? @map("snapshot_before") // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    snapshotAfter  String? @map("snapshot_after") // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏

    // üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥ –∏–º–ø–æ—Ä—Ç–∞ (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ)
    importLogId Int? @map("import_log_id")
}

model sms_code {
    id         Int      @id @default(autoincrement())
    phone      String   @db.VarChar(255)
    code       String   @db.VarChar(10)
    expires_at DateTime @default(now()) @db.Timestamp(0)
    used       Boolean  @default(false)
    created_at DateTime @default(now()) @db.Timestamp(0)
}

model supplier {
    id         Int      @id @default(autoincrement())
    name       String   @db.VarChar(255)
    created_at DateTime @default(now()) @db.Timestamp(0)
}

model Promotion {
    id          Int      @id @default(autoincrement())
    title       String   @db.VarChar(255)
    description String?  @db.Text
    image       String?  @db.VarChar(255)
    buttonText  String?  @db.VarChar(255)
    buttonLink  String?  @db.VarChar(255)
    order       Int      @default(0)
    createdAt   DateTime @default(now()) @db.Timestamp(0)
    updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model user_log {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now()) @db.Timestamp(0)
    action     String   @db.VarChar(255)
    message    String?  @db.Text

    // üì∏ –°–Ω–∏–º–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è ID)
    admin_snapshot       Json? // –ê–¥–º–∏–Ω –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ
    target_user_snapshot Json? // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º —Å–æ–≤–µ—Ä—à–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
    department_snapshot  Json? // –û—Ç–¥–µ–ª

    // üì¶ –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    admin_id        Int? // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    target_user_id  Int? // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    department_id   Int? // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    user_id         Int? // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    snapshot_before String? // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    snapshot_after  String? // TODO: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
}

model OrderLog {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
    action    String   @db.VarChar(255) // "create", "update", "assign", "status_change", "cancel"
    message   String?  @db.Text
    orderId   Int      @map("order_id")

    // üì∏ –°–Ω–∏–º–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è ID)
    adminSnapshot      Json? // –ê–¥–º–∏–Ω –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ
    orderSnapshot      Json? // –°–Ω–∞–ø—à–æ—Ç –∑–∞–∫–∞–∑–∞
    managerSnapshot    Json? // –°–Ω–∞–ø—à–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ/—Å–Ω—è—Ç–∏–µ)
    departmentSnapshot Json? // –°–Ω–∞–ø—à–æ—Ç –æ—Ç–¥–µ–ª–∞

    // –°–≤—è–∑–∏
    order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

    @@map("order_log")
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π
model ChangeLog {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    // –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω—è–ª–∞—Å—å
    entityType String // "user", "department", "product", "order", "category"

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
    message String?

    // –ü–æ–ª–Ω—ã–µ —Å–Ω–∞–ø—à–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    snapshotBefore Json? // –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –î–û –∏–∑–º–µ–Ω–µ–Ω–∏–π
    snapshotAfter  Json? // –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏–π
    adminSnapshot  Json? // –ü–æ–ª–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫—Ç–æ —Å–æ–≤–µ—Ä—à–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ)

    // –ú–∞—Å—Å–∏–≤ –¥–µ–π—Å—Ç–≤–∏–π (–¥–ª—è –æ—Ç–¥–µ–ª–æ–≤)
    actions Json? // ["add_employees", "change_name", ...]

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞
    entityId     Int? // ID –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞)
    adminId      Int? // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞)
    departmentId Int? // ID –æ—Ç–¥–µ–ª–∞ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞)
}

enum Role {
    superadmin
    admin
    manager
    client
}

enum UserStatus {
    unverified
    verified
}

enum FilterType {
    select
    multi_select
    range
    boolean
}

enum OrderStatus {
    created // –°–æ–∑–¥–∞–Ω
    confirmed // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
    completed // –í—ã–ø–æ–ª–Ω–µ–Ω
    cancelled // –û—Ç–º–µ–Ω—ë–Ω
}
