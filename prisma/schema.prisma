// prisma\schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// ------------------------------
// üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–æ–ª–∏
// ------------------------------
model User {
    id         Int        @id @default(autoincrement()) @map("id")
    first_name String     @map("first_name")
    last_name  String     @map("last_name")
    phone      String     @unique @map("phone")
    password   String     @map("password")
    role       Role       @map("role")
    status     UserStatus @default(unverified) @map("status")
    createdAt  DateTime   @default(now()) @map("created_at")

    adminId  Int?   @map("admin_id")
    admin    User?  @relation("AdminManagers", fields: [adminId], references: [id])
    managers User[] @relation("AdminManagers")

    managerOrders Order[] @relation("ManagerOrders")
    clientOrders  Order[] @relation("ClientOrders")

    @@map("user")
}

enum Role {
    superadmin
    admin
    manager
    client
}

enum UserStatus {
    unverified
    verified
}

// ------------------------------
// üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
// ------------------------------
model Category {
    id        Int      @id @default(autoincrement()) @map("id")
    title     String   @unique @map("title")
    image     String?  @map("image")
    createdAt DateTime @default(now()) @map("created_at")

    products Product[]
    Filter   Filter[]

    order Int @default(0) @map("order")

    @@map("category")
}

model Product {
    id          Int      @id @default(autoincrement()) @map("id")
    title       String   @map("title")
    sku         String   @unique @map("sku")
    brand       String   @default("UNKNOWN") @map("brand")
    price       Float    @map("price")
    description String?  @map("description")
    image       String?  @map("image")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

    categoryId Int?      @map("category_id")
    category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

    productFilterValues ProductFilterValue[]

    analogsFrom     ProductAnalog[]  @relation("ProductToAnalog")
    analogsTo       ProductAnalog[]  @relation("AnalogToProduct")
    OrderItem       OrderItem[]
    serviceKitItems ServiceKitItem[] @relation("KitItemProduct")
    analogInKits    ServiceKitItem[] @relation("KitItemAnalog")

    @@map("product")
}

// ------------------------------
// üß© –§–∏–ª—å—Ç—Ä—ã
// ------------------------------
model Filter {
    id         Int           @id @default(autoincrement()) @map("id")
    title      String        @map("title")
    type       FilterType    @default(select) @map("type")
    categoryId Int           @map("category_id")
    category   Category      @relation(fields: [categoryId], references: [id])
    values     FilterValue[]

    @@map("filter")
}

enum FilterType {
    select
    multi
    range
    boolean
}

model FilterValue {
    id       Int    @id @default(autoincrement()) @map("id")
    value    String @map("value")
    filterId Int    @map("filter_id")
    filter   Filter @relation(fields: [filterId], references: [id])

    productFilterValues ProductFilterValue[]

    @@map("filter_value")
}

model ProductFilterValue {
    id            Int @id @default(autoincrement()) @map("id")
    productId     Int @map("product_id")
    filterValueId Int @map("filter_value_id")

    product     Product     @relation(fields: [productId], references: [id])
    filterValue FilterValue @relation(fields: [filterValueId], references: [id])

    @@unique([productId, filterValueId])
    @@map("product_filter_value")
}

// ------------------------------
// üîÑ –ê–Ω–∞–ª–æ–≥–∏
// ------------------------------
model ProductAnalog {
    id        Int @id @default(autoincrement()) @map("id")
    productId Int @map("product_id")
    analogId  Int @map("analog_id")

    product Product @relation("ProductToAnalog", fields: [productId], references: [id])
    analog  Product @relation("AnalogToProduct", fields: [analogId], references: [id])

    @@unique([productId, analogId])
    @@map("product_analog")
}

// ------------------------------
// üõ† –ö–æ–º–ø–ª–µ–∫—Ç—ã –¢–û
// ------------------------------
model ServiceKit {
    id          Int      @id @default(autoincrement()) @map("id")
    title       String   @map("title")
    description String?  @map("description")
    image       String?  @map("image")
    price       Float    @map("price")
    createdAt   DateTime @default(now()) @map("created_at")

    kitItems ServiceKitItem[]

    @@map("service_kit")
}

model ServiceKitItem {
    id              Int  @id @default(autoincrement()) @map("id")
    kitId           Int  @map("kit_id")
    productId       Int  @map("product_id")
    analogProductId Int? @map("analog_product_id")

    kit           ServiceKit @relation(fields: [kitId], references: [id])
    product       Product    @relation("KitItemProduct", fields: [productId], references: [id])
    analogProduct Product?   @relation("KitItemAnalog", fields: [analogProductId], references: [id])

    @@map("service_kit_item")
}

// ------------------------------
// üìë –ó–∞–∫–∞–∑—ã
// ------------------------------
model Order {
    id          Int         @id @default(autoincrement()) @map("id")
    title       String      @map("title")
    description String?     @map("description")
    status      OrderStatus @default(pending) @map("status")
    createdAt   DateTime    @default(now()) @map("created_at")

    managerId Int  @map("manager_id")
    manager   User @relation("ManagerOrders", fields: [managerId], references: [id])

    clientId Int  @map("client_id")
    client   User @relation("ClientOrders", fields: [clientId], references: [id])

    orderItems OrderItem[]

    @@map("order")
}

model OrderItem {
    id        Int @id @default(autoincrement()) @map("id")
    orderId   Int @map("order_id")
    productId Int @map("product_id")
    quantity  Int @default(1) @map("quantity")

    order   Order   @relation(fields: [orderId], references: [id])
    product Product @relation(fields: [productId], references: [id])

    @@map("order_item")
}

enum OrderStatus {
    pending
    confirmed
    shipped
    delivered
    cancelled
}

// ------------------------------
// üéÅ –ê–∫—Ü–∏–∏
// ------------------------------
model Promotion {
    id          Int      @id @default(autoincrement()) @map("id")
    image       String   @map("image")
    title       String   @map("title")
    description String?  @map("description")
    buttonText  String?  @map("button_text")
    buttonLink  String?  @map("button_link")
    createdAt   DateTime @default(now()) @map("created_at")

    order Int @default(0) @map("order")

    @@map("promotion")
}

// ------------------------------
// –ë–ê–ó–ê
// ------------------------------
model Supplier {
    id        Int           @id @default(autoincrement())
    name      String
    formats   PriceFormat[]
    createdAt DateTime      @default(now())
}

model PriceFormat {
    id         Int      @id @default(autoincrement())
    supplierId Int
    supplier   Supplier @relation(fields: [supplierId], references: [id])
    columns    Json
    createdAt  DateTime @default(now())
}
