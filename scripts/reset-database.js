#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 *
 * –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 2. –ó–∞–Ω–æ–≤–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
 * 3. –ó–∞–ø—É—Å–∫–∞–µ—Ç seed –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 *
 * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã!
 */

const { execSync } = require("child_process");
const path = require("path");

console.log("üö® –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!");
console.log("üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:");
console.log("   1. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã");
console.log("   2. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ");
console.log("   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å seed –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
console.log("");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –≤—ã–≤–æ–¥–æ–º
function runCommand(command, description) {
	console.log(`üîÑ ${description}...`);
	try {
		execSync(command, {
			stdio: "inherit",
			cwd: path.resolve(__dirname, ".."),
		});
		console.log(`‚úÖ ${description} - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
	} catch (error) {
		console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${description}`);
		console.error(error.message);
		process.exit(1);
	}
}

async function resetDatabase() {
	try {
		// –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
		runCommand("npx prisma db push --force-reset", "–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");

		// –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
		runCommand("npx prisma generate", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞");

		// –®–∞–≥ 3: –ó–∞–ø—É—Å–∫–∞–µ–º seed –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		runCommand("npm run seed", "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");

		console.log("");
		console.log("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!");
		console.log("üìä –°–æ–∑–¥–∞–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
		console.log("   - 3 –æ—Ç–¥–µ–ª–∞");
		console.log("   - 8 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)");
		console.log("   - 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤");
		console.log("   - –¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª–∞");
		console.log("   - 2 –∞–∫—Ü–∏–∏");
		console.log("");
		console.log("üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:");
		console.log("   –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: 9954091882 / 1234");
		console.log("   –ê–¥–º–∏–Ω 1: 9954091883 / 1234");
		console.log("   –ê–¥–º–∏–Ω 2: 9954091886 / 1234");
		console.log("   –ê–¥–º–∏–Ω 3: 9954091887 / 1234");
	} catch (error) {
		console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error.message);
		process.exit(1);
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å
resetDatabase();
